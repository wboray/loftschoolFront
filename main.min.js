"use strict";function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}document.addEventListener("DOMContentLoaded",function(e){var t=document.querySelector("#sheet-command"),r=document.querySelectorAll(".sheet-command__people");t.addEventListener("click",function(e){e.preventDefault();var t=e.target;if(t.parentNode.classList.contains("sheet-command__title")){var n=t.parentNode;r.forEach(function(e){e!=n.parentNode.parentNode&&e.classList.remove("active")}),n.parentNode.parentNode.classList.toggle("active")}})}),document.addEventListener("DOMContentLoaded",function(e){var t=document.querySelector("body"),n=(document.querySelector("html"),document.querySelector(".form__btn-custom")),r=document.querySelector(".form__clear"),o=document.querySelector("#overlayTemplate").innerHTML;if(null!=o)var i=createOverlay(o,t);function a(e,t){i.setContent(e,t),i.open()}n.addEventListener("click",function(e){e.preventDefault(),document.querySelector("#send-btn").click()});var s=document.querySelector("#formid");s.addEventListener("submit",function(e){e.preventDefault();var t=e.target,n=l(t);n&&n.addEventListener("load",function(){null==n.response?a("неизвестная ошибка","ошибка"):200<n.status?a(n.responseText,"ошибка"):a(n.response.message)})}),r.addEventListener("click",function(e){e.preventDefault(),s.reset()});var l=function(e){var t=new FormData(e);t.append("to","wboray@yandex.ru");try{!function(e,t){if(console.log(e),console.log(e.get("name")),""==e.get("name")||20<e.get("name").length)throw t.querySelector('input[name="name"]').setCustomValidity("Имя не должно быть пустым и больше чем 20 символов"),t.querySelector('input[name="name"]').reportValidity(),new c("Имя не должно быть пустым и больше чем 20 символов");if(""==e.get("phone")||12<e.get("phone").length)throw t.querySelector('input[name="phone"]').setCustomValidity("Телефон не должен быть пустым и больше чем 12 символов"),t.querySelector('input[name="phone"]').reportValidity(),new c("Телефон не должен быть пустым и больше чем 12 символов");if(""==e.get("comment"))throw t.querySelector('textarea[name="comment"]').setCustomValidity("Комментарий не должен быть пустым"),t.querySelector('textarea[name="comment"]').reportValidity(),new c("Комментарий не должен быть пустым")}(t,e)}catch(e){return console.error(e.name+": "+e.message),!1}var n=new XMLHttpRequest;return n.responseType="json",n.open("POST","https://webdev-api.loftschool.com/sendmail"),n.setRequestHeader("X-Requested-width","XMLHttpRequest"),n.send(t),n};function c(e){this.message=e,this.name="Исключение, определенное пользователем"}$("input, textarea").on("input",function(){this.setCustomValidity("")})}),function(e,t,n,r){"function"==typeof define&&define.amd?define(function(){return e.fullpage=r(t,n),e.fullpage}):"object"===("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports=r(t,n):t.fullpage=r(t,n)}(void 0,window,document,function(Ct,Lt){var kt="fullpage-wrapper",At="."+kt,Nt="fp-responsive",Dt="fp-notransition",jt="fp-destroyed",qt="fp-enabled",Ot="fp-viewing",Mt="active",Ht="."+Mt,_t="fp-completely",Pt="fp-section",Rt="."+Pt,It=Rt+Ht,Bt="fp-tableCell",Ft="."+Bt,Wt="fp-auto-height",$t="fp-normal-scroll",zt="#fp-nav",Vt="fp-tooltip",Xt="fp-slide",Ut="."+Xt,Yt=Ut+Ht,Kt="fp-slides",Qt="."+Kt,Gt="fp-slidesContainer",Jt="."+Gt,Zt="fp-table",en="fp-slidesNav",tn="."+en,nn=tn+" a",e="fp-controlArrow",rn="."+e,on="fp-prev",an=rn+".fp-prev",sn=rn+".fp-next";function ln(e,t){Ct.console&&Ct.console[e]&&Ct.console[e]("fullPage: "+t)}function cn(e,t){return(t=1<arguments.length?t:Lt)?t.querySelectorAll(e):null}function un(e){e=e||{};for(var t=1,n=arguments.length;t<n;++t){var r=arguments[t];if(r)for(var o in r)r.hasOwnProperty(o)&&("[object Object]"!==Object.prototype.toString.call(r[o])?e[o]=r[o]:e[o]=un(e[o],r[o]))}return e}function fn(e,t){return null!=e&&(e.classList?e.classList.contains(t):new RegExp("(^| )"+t+"( |$)","gi").test(e.className))}function dn(){return"innerHeight"in Ct?Ct.innerHeight:Lt.documentElement.offsetHeight}function pn(e,t){var n;for(n in e=a(e),t)if(t.hasOwnProperty(n)&&null!==n)for(var r=0;r<e.length;r++){e[r].style[n]=t[n]}return e}function n(e,t,n){for(var r=e[n];r&&!_n(r,t);)r=r[n];return r}function hn(e,t){return n(e,t,"previousElementSibling")}function vn(e,t){return n(e,t,"nextElementSibling")}function gn(e){return e.previousElementSibling}function mn(e){return e.nextElementSibling}function yn(e){return e[e.length-1]}function bn(e,t){e=i(e)?e[0]:e;for(var n=null!=t?cn(t,e.parentNode):e.parentNode.childNodes,r=0,o=0;o<n.length;o++){if(n[o]==e)return r;1==n[o].nodeType&&r++}return-1}function a(e){return i(e)?e:[e]}function xn(e){e=a(e);for(var t=0;t<e.length;t++)e[t].style.display="none";return e}function wn(e){e=a(e);for(var t=0;t<e.length;t++)e[t].style.display="block";return e}function i(e){return"[object Array]"===Object.prototype.toString.call(e)||"[object NodeList]"===Object.prototype.toString.call(e)}function Sn(e,t){e=a(e);for(var n=0;n<e.length;n++){var r=e[n];r.classList?r.classList.add(t):r.className+=" "+t}return e}function Tn(e,t){e=a(e);for(var n=t.split(" "),r=0;r<n.length;r++){t=n[r];for(var o=0;o<e.length;o++){var i=e[o];i.classList?i.classList.remove(t):i.className=i.className.replace(new RegExp("(^|\\b)"+t.split(" ").join("|")+"(\\b|$)","gi")," ")}}return e}function En(e,t){t.appendChild(e)}function r(e,t,n){var r;t=t||Lt.createElement("div");for(var o=0;o<e.length;o++){var i=e[o];(!n||o)&&n||(r=t.cloneNode(!0),i.parentNode.insertBefore(r,i)),r.appendChild(i)}return e}function Cn(e,t){r(e,t,!0)}function Ln(e,t){for("string"==typeof t&&(t=Rn(t)),e.appendChild(t);e.firstChild!==t;)t.appendChild(e.firstChild)}function kn(e){for(var t=Lt.createDocumentFragment();e.firstChild;)t.appendChild(e.firstChild);e.parentNode.replaceChild(t,e)}function An(e,t){return e&&1===e.nodeType?_n(e,t)?e:An(e.parentNode,t):null}function Nn(e,t){o(e,e.nextSibling,t)}function Dn(e,t){o(e,e,t)}function o(e,t,n){i(n)||("string"==typeof n&&(n=Rn(n)),n=[n]);for(var r=0;r<n.length;r++)e.parentNode.insertBefore(n[r],t)}function jn(){var e=Lt.documentElement;return(Ct.pageYOffset||e.scrollTop)-(e.clientTop||0)}function qn(t){return Array.prototype.filter.call(t.parentNode.children,function(e){return e!==t})}function On(e){e.preventDefault||(e.returnValue=!1)}function Mn(e){if("function"==typeof e)return!0;var t=Object.prototype.toString(e);return"[object Function]"===t||"[object GeneratorFunction]"===t}function Hn(e,t,n){var r;n=void 0===n?{}:n,"function"==typeof Ct.CustomEvent?r=new CustomEvent(t,{detail:n}):(r=Lt.createEvent("CustomEvent")).initCustomEvent(t,!0,!0,n),e.dispatchEvent(r)}function _n(e,t){return(e.matches||e.matchesSelector||e.msMatchesSelector||e.mozMatchesSelector||e.webkitMatchesSelector||e.oMatchesSelector).call(e,t)}function Pn(e,t){if("boolean"==typeof t)for(var n=0;n<e.length;n++)e[n].style.display=t?"block":"none";return e}function Rn(e){var t=Lt.createElement("div");return t.innerHTML=e.trim(),t.firstChild}function In(e){e=a(e);for(var t=0;t<e.length;t++){var n=e[t];n&&n.parentElement&&n.parentNode.removeChild(n)}}function s(e,t,n){for(var r=e[n],o=[];r;)!_n(r,t)&&null!=t||o.push(r),r=r[n];return o}function Bn(e,t){return s(e,t,"nextElementSibling")}function Fn(e,t){return s(e,t,"previousElementSibling")}return Ct.NodeList&&!NodeList.prototype.forEach&&(NodeList.prototype.forEach=function(e,t){t=t||Ct;for(var n=0;n<this.length;n++)e.call(t,this[n],n,this)}),Ct.fp_utils={$:cn,deepExtend:un,hasClass:fn,getWindowHeight:dn,css:pn,until:n,prevUntil:hn,nextUntil:vn,prev:gn,next:mn,last:yn,index:bn,getList:a,hide:xn,show:wn,isArrayOrList:i,addClass:Sn,removeClass:Tn,appendTo:En,wrap:r,wrapAll:Cn,wrapInner:Ln,unwrap:kn,closest:An,after:Nn,before:Dn,insertBefore:o,getScrollTop:jn,siblings:qn,preventDefault:On,isFunction:Mn,trigger:Hn,matches:_n,toggle:Pn,createElementFromHTML:Rn,remove:In,filter:function(e,t){Array.prototype.filter.call(e,t)},untilAll:s,nextAll:Bn,prevAll:Fn,showError:ln},function(e,m){var n=m&&new RegExp("([\\d\\w]{8}-){3}[\\d\\w]{8}|^(?=.*?[A-Y])(?=.*?[a-y])(?=.*?[0-8])(?=.*?[#?!@$%^&*-]).{8,}$").test(m.licenseKey)||-1<Lt.domain.indexOf("alvarotrigo.com");if(!fn(cn("html"),qt)){var o=cn("html, body"),y=cn("body")[0],s={};m=un({menu:!1,anchors:[],lockAnchors:!1,navigation:!1,navigationPosition:"right",navigationTooltips:[],showActiveTooltip:!1,slidesNavigation:!1,slidesNavPosition:"bottom",scrollBar:!1,hybrid:!1,css3:!0,scrollingSpeed:700,autoScrolling:!0,fitToSection:!0,fitToSectionDelay:1e3,easing:"easeInOutCubic",easingcss3:"ease",loopBottom:!1,loopTop:!1,loopHorizontal:!0,continuousVertical:!1,continuousHorizontal:!1,scrollHorizontally:!1,interlockedSlides:!1,dragAndMove:!1,offsetSections:!1,resetSliders:!1,fadingEffect:!1,normalScrollElements:null,scrollOverflow:!1,scrollOverflowReset:!1,scrollOverflowHandler:Ct.fp_scrolloverflow?Ct.fp_scrolloverflow.iscrollHandler:null,scrollOverflowOptions:null,touchSensitivity:5,touchWrapper:"string"==typeof e?cn(e)[0]:e,normalScrollElementTouchThreshold:5,bigSectionsDestination:null,keyboardScrolling:!0,animateAnchor:!0,recordHistory:!0,controlArrows:!0,controlArrowColor:"#fff",verticalCentered:!0,sectionsColor:[],paddingTop:0,paddingBottom:0,fixedElements:null,responsive:0,responsiveWidth:0,responsiveHeight:0,responsiveSlides:!1,parallax:!1,parallaxOptions:{type:"reveal",percentage:62,property:"translate"},cards:!1,cardsOptions:{perspective:100,fadeContent:!0,fadeBackground:!0},sectionSelector:".section",slideSelector:".slide",v2compatible:!1,afterLoad:null,onLeave:null,afterRender:null,afterResize:null,afterReBuild:null,afterSlideLoad:null,onSlideLeave:null,afterResponsive:null,lazyLoading:!0},m);var b,i,c,r,l=!1,a=navigator.userAgent.match(/(iPhone|iPod|iPad|Android|playbook|silk|BlackBerry|BB10|Windows Phone|Tizen|Bada|webOS|IEMobile|Opera Mini)/),u="ontouchstart"in Ct||0<navigator.msMaxTouchPoints||navigator.maxTouchPoints,f="string"==typeof e?cn(e)[0]:e,x=dn(),d=!1,t=!0,w=!0,p=[],h={m:{up:!0,down:!0,left:!0,right:!0}};h.k=un({},h.m);var v,g,S,T,E,C,L,k=function(){var e;e=Ct.PointerEvent?{down:"pointerdown",move:"pointermove"}:{down:"MSPointerDown",move:"MSPointerMove"};return e}(),A={touchmove:"ontouchmove"in Ct?"touchmove":k.move,touchstart:"ontouchstart"in Ct?"touchstart":k.down},N='a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex="0"], [contenteditable]',D=!1;try{var j=Object.defineProperty({},"passive",{get:function(){D=!0}});Ct.addEventListener("testPassive",null,j),Ct.removeEventListener("testPassive",null,j)}catch(e){}var q,O=un({},m),M=!1,H=!0;bt(),Ct.fp_easings=un(Ct.fp_easings,{easeInOutCubic:function(e,t,n,r){return(e/=r/2)<1?n/2*e*e*e+t:n/2*((e-=2)*e*e+2)+t}}),f&&(s.version="3.0.5",s.setAutoScrolling=X,s.setRecordHistory=U,s.setScrollingSpeed=Y,s.setFitToSection=K,s.setLockAnchors=function(e){m.lockAnchors=e},s.setMouseWheelScrolling=Q,s.setAllowScrolling=G,s.setKeyboardScrolling=Z,s.moveSectionUp=ee,s.moveSectionDown=te,s.silentMoveTo=ne,s.moveTo=re,s.moveSlideRight=oe,s.moveSlideLeft=ie,s.fitToSection=me,s.reBuild=ae,s.setResponsive=se,s.getFullpageData=function(){return m},s.destroy=function(e){X(!1,"internal"),G(!0),J(!1),Z(!1),Sn(f,jt),clearTimeout(T),clearTimeout(S),clearTimeout(g),clearTimeout(E),clearTimeout(C),Ct.removeEventListener("scroll",ge),Ct.removeEventListener("hashchange",Be),Ct.removeEventListener("resize",Ge),Lt.removeEventListener("keydown",We),Lt.removeEventListener("keyup",$e),["click","touchstart"].forEach(function(e){Lt.removeEventListener(e,le)}),["mouseenter","touchstart","mouseleave","touchend"].forEach(function(e){Lt.removeEventListener(e,ue,!0)}),clearTimeout(T),clearTimeout(S),e&&(vt(0),cn("img[data-src], source[data-src], audio[data-src], iframe[data-src]",f).forEach(function(e){Oe(e,"src")}),cn("img[data-srcset]").forEach(function(e){Oe(e,"srcset")}),In(cn(zt+", "+tn+", "+rn)),pn(cn(Rt),{height:"","background-color":"",padding:""}),pn(cn(Ut),{width:""}),pn(f,{height:"",position:"","-ms-touch-action":"","touch-action":""}),pn(o,{overflow:"",height:""}),Tn(cn("html"),qt),Tn(y,Nt),y.className.split(/\s+/).forEach(function(e){0===e.indexOf(Ot)&&Tn(y,e)}),cn(Rt+", "+Ut).forEach(function(e){m.scrollOverflowHandler&&m.scrollOverflow&&m.scrollOverflowHandler.remove(e),Tn(e,Zt+" "+Mt+" "+_t),e.getAttribute("data-fp-styles")&&e.setAttribute("style",e.getAttribute("data-fp-styles")),fn(e,Pt)&&!M&&e.removeAttribute("data-anchor")}),et(f),[Ft,Jt,Qt].forEach(function(e){cn(e,f).forEach(function(e){kn(e)})}),pn(f,{"-webkit-transition":"none",transition:"none"}),Ct.scrollTo(0,0),[Pt,Xt,Gt].forEach(function(e){Tn(cn("."+e),e)}))},s.getActiveSection=function(){return new Tt(cn(It)[0])},s.getActiveSlide=function(){return De(cn(Yt,cn(It)[0])[0])},s.test={top:"0px",translate3d:"translate3d(0px, 0px, 0px)",translate3dH:function(){for(var e=[],t=0;t<cn(m.sectionSelector,f).length;t++)e.push("translate3d(0px, 0px, 0px)");return e}(),left:function(){for(var e=[],t=0;t<cn(m.sectionSelector,f).length;t++)e.push(0);return e}(),options:m,setAutoScrolling:X},s.shared={afterRenderActions:ve},Ct.fullpage_api=s,m.$&&(m.$.fn.fullpage=s),function(){m.css3&&(m.css3=function(){var e,t=Lt.createElement("p"),n={webkitTransform:"-webkit-transform",OTransform:"-o-transform",msTransform:"-ms-transform",MozTransform:"-moz-transform",transform:"transform"};for(var r in t.style.display="block",Lt.body.insertBefore(t,null),n)void 0!==t.style[r]&&(t.style[r]="translate3d(1px,1px,1px)",e=Ct.getComputedStyle(t).getPropertyValue(n[r]));return Lt.body.removeChild(t),void 0!==e&&0<e.length&&"none"!==e}());m.scrollBar=m.scrollBar||m.hybrid,function(){if(!m.anchors.length){var e="[data-anchor]",t=cn(m.sectionSelector.split(",").join(e+",")+e,f);t.length&&(M=!0,t.forEach(function(e){m.anchors.push(e.getAttribute("data-anchor").toString())}))}if(!m.navigationTooltips.length){e="[data-tooltip]";var n=cn(m.sectionSelector.split(",").join(e+",")+e,f);n.length&&n.forEach(function(e){m.navigationTooltips.push(e.getAttribute("data-tooltip").toString())})}}(),function(){pn(f,{height:"100%",position:"relative"}),Sn(f,kt),Sn(cn("html"),qt),x=dn(),Tn(f,jt),Sn(cn(m.sectionSelector,f),Pt),Sn(cn(m.slideSelector,f),Xt);for(var e=cn(Rt),t=0;t<e.length;t++){var n=t,r=e[t],o=cn(Ut,r),i=o.length;r.setAttribute("data-fp-styles",r.getAttribute("style")),de(r,n),pe(r,n),0<i?fe(r,o,i):m.verticalCentered&&rt(r)}m.fixedElements&&m.css3&&cn(m.fixedElements).forEach(function(e){y.appendChild(e)});m.navigation&&function(){var e=Lt.createElement("div");e.setAttribute("id","fp-nav");var t=Lt.createElement("ul");e.appendChild(t),En(e,y);var n=cn(zt)[0];Sn(n,"fp-"+m.navigationPosition),m.showActiveTooltip&&Sn(n,"fp-show-active");for(var r="",o=0;o<cn(Rt).length;o++){var i="";m.anchors.length&&(i=m.anchors[o]),r+='<li><a href="#'+i+'"><span class="fp-sr-only">'+he(o,"Section")+"</span><span></span></a>";var a=m.navigationTooltips[o];void 0!==a&&""!==a&&(r+='<div class="'+Vt+" fp-"+m.navigationPosition+'">'+a+"</div>"),r+="</li>"}cn("ul",n)[0].innerHTML=r,pn(cn(zt),{"margin-top":"-"+cn(zt)[0].offsetHeight/2+"px"}),Sn(cn("a",cn("li",cn(zt)[0])[bn(cn(It)[0],Rt)]),Mt)}();cn('iframe[src*="youtube.com/embed/"]',f).forEach(function(e){!function(e,t){var n=e.getAttribute("src");e.setAttribute("src",n+function(e){return/\?/.test(e)?"&":"?"}(n)+t)}(e,"enablejsapi=1")}),m.scrollOverflow&&(v=m.scrollOverflowHandler.init(m))}(),G(!0),J(!0),X(m.autoScrolling,"internal"),Je(),dt(),"complete"===Lt.readyState&&Ie();Ct.addEventListener("load",Ie),m.scrollOverflow||ve()}(),Ct.addEventListener("scroll",ge),Ct.addEventListener("hashchange",Be),Ct.addEventListener("blur",Ue),Ct.addEventListener("resize",Ge),Lt.addEventListener("keydown",We),Lt.addEventListener("keyup",$e),["click","touchstart"].forEach(function(e){Lt.addEventListener(e,le)}),m.normalScrollElements&&(["mouseenter","touchstart"].forEach(function(e){ce(e,!1)}),["mouseleave","touchend"].forEach(function(e){ce(e,!0)})));var _=!1,P=0,R=0,I=0,B=0,F=0,W=(new Date).getTime(),$=0,z=0,V=x;return s}function X(e,t){e||vt(0),yt("autoScrolling",e,t);var n=cn(It)[0];if(m.autoScrolling&&!m.scrollBar)pn(o,{overflow:"hidden",height:"100%"}),U(O.recordHistory,"internal"),pn(f,{"-ms-touch-action":"none","touch-action":"none"}),null!=n&&vt(n.offsetTop);else if(pn(o,{overflow:"visible",height:"initial"}),U(!!m.autoScrolling&&O.recordHistory,"internal"),pn(f,{"-ms-touch-action":"","touch-action":""}),null!=n){var r=je(n.offsetTop);r.element.scrollTo(0,r.options)}}function U(e,t){yt("recordHistory",e,t)}function Y(e,t){yt("scrollingSpeed",e,t)}function K(e,t){yt("fitToSection",e,t)}function Q(e){e?(function(){var e,t="";Ct.addEventListener?e="addEventListener":(e="attachEvent",t="on");var n="onwheel"in Lt.createElement("div")?"wheel":void 0!==Lt.onmousewheel?"mousewheel":"DOMMouseScroll",r=!!D&&{passive:!1};"DOMMouseScroll"==n?Lt[e](t+"MozMousePixelScroll",Ee,r):Lt[e](t+n,Ee,r)}(),f.addEventListener("mousedown",ze),f.addEventListener("mouseup",Ve)):(Lt.addEventListener?(Lt.removeEventListener("mousewheel",Ee,!1),Lt.removeEventListener("wheel",Ee,!1),Lt.removeEventListener("MozMousePixelScroll",Ee,!1)):Lt.detachEvent("onmousewheel",Ee),f.removeEventListener("mousedown",ze),f.removeEventListener("mouseup",Ve))}function G(t,e){void 0!==e?(e=e.replace(/ /g,"").split(",")).forEach(function(e){mt(t,e,"m")}):mt(t,"all","m")}function J(e){e?(Q(!0),function(){if(a||u){m.autoScrolling&&(y.removeEventListener(A.touchmove,be,{passive:!1}),y.addEventListener(A.touchmove,be,{passive:!1}));var e=m.touchWrapper;e.removeEventListener(A.touchstart,Se),e.removeEventListener(A.touchmove,xe,{passive:!1}),e.addEventListener(A.touchstart,Se),e.addEventListener(A.touchmove,xe,{passive:!1})}}()):(Q(!1),function(){if(a||u){m.autoScrolling&&(y.removeEventListener(A.touchmove,xe,{passive:!1}),y.removeEventListener(A.touchmove,be,{passive:!1}));var e=m.touchWrapper;e.removeEventListener(A.touchstart,Se),e.removeEventListener(A.touchmove,xe,{passive:!1})}}())}function Z(t,e){void 0!==e?(e=e.replace(/ /g,"").split(",")).forEach(function(e){mt(t,e,"k")}):(mt(t,"all","k"),m.keyboardScrolling=t)}function ee(){var e=hn(cn(It)[0],Rt);e||!m.loopTop&&!m.continuousVertical||(e=yn(cn(Rt))),null!=e&&ke(e,null,!0)}function te(){var e=vn(cn(It)[0],Rt);e||!m.loopBottom&&!m.continuousVertical||(e=cn(Rt)[0]),null!=e&&ke(e,null,!1)}function ne(e,t){Y(0,"internal"),re(e,t),Y(O.scrollingSpeed,"internal")}function re(e,t){var n=at(e);void 0!==t?st(e,t):null!=n&&ke(n)}function oe(e){Ce("right",e)}function ie(e){Ce("left",e)}function ae(e){if(!fn(f,jt)){d=!0,x=dn();for(var t=cn(Rt),n=0;n<t.length;++n){var r=t[n],o=cn(Qt,r)[0],i=cn(Ut,r);m.verticalCentered&&pn(cn(Ft,r),{height:ot(r)+"px"}),pn(r,{height:x+"px"}),1<i.length&&Ke(o,cn(Yt,o)[0])}m.scrollOverflow&&v.createScrollBarForAll();var a=bn(cn(It)[0],Rt);a&&ne(a+1),d=!1,Mn(m.afterResize)&&e&&m.afterResize.call(f,Ct.innerWidth,Ct.innerHeight),Mn(m.afterReBuild)&&!e&&m.afterReBuild.call(f)}}function se(e){var t=fn(y,Nt);e?t||(X(!1,"internal"),K(!1,"internal"),xn(cn(zt)),Sn(y,Nt),Mn(m.afterResponsive)&&m.afterResponsive.call(f,e),m.scrollOverflow&&v.createScrollBarForAll()):t&&(X(O.autoScrolling,"internal"),K(O.autoScrolling,"internal"),wn(cn(zt)),Tn(y,Nt),Mn(m.afterResponsive)&&m.afterResponsive.call(f,e))}function le(e){var t=e.target;t&&An(t,zt+" a")?function(e){On(e);var t=bn(An(this,zt+" li"));ke(cn(Rt)[t])}.call(t,e):_n(t,".fp-tooltip")?function(){Hn(gn(this),"click")}.call(t):_n(t,rn)?function(){var e=An(this,Rt);fn(this,on)?h.m.left&&ie(e):h.m.right&&oe(e)}.call(t,e):_n(t,nn)||null!=An(t,nn)?function(e){On(e);var t=cn(Qt,An(this,Rt))[0],n=cn(Ut,t)[bn(An(this,"li"))];Ke(t,n)}.call(t,e):An(t,m.menu+" [data-menuanchor]")&&function(e){!cn(m.menu)[0]||!m.lockAnchors&&m.anchors.length||(On(e),re(this.getAttribute("data-menuanchor")))}.call(t,e)}function ce(e,t){Lt["fp_"+e]=t,Lt.addEventListener(e,ue,!0)}function ue(t){t.target!=Lt&&("touchend"===t.type&&(H=!1,setTimeout(function(){H=!0},800)),"mouseenter"===t.type&&!H||m.normalScrollElements.split(",").forEach(function(e){null!=An(t.target,e)&&J(Lt["fp_"+t.type])}))}function fe(e,t,n){var r=100*n,o=100/n,i=Lt.createElement("div");i.className=Kt,Cn(t,i);var a=Lt.createElement("div");a.className=Gt,Cn(t,a),pn(cn(Jt,e),{width:r+"%"}),1<n&&(m.controlArrows&&function(e){var t=[Rn('<div class="fp-controlArrow fp-prev"></div>'),Rn('<div class="fp-controlArrow fp-next"></div>')];Nn(cn(Qt,e)[0],t),"#fff"!==m.controlArrowColor&&(pn(cn(sn,e),{"border-color":"transparent transparent transparent "+m.controlArrowColor}),pn(cn(an,e),{"border-color":"transparent "+m.controlArrowColor+" transparent transparent"}));m.loopHorizontal||xn(cn(an,e))}(e),m.slidesNavigation&&function(e,t){En(Rn('<div class="'+en+'"><ul></ul></div>'),e);var n=cn(tn,e)[0];Sn(n,"fp-"+m.slidesNavPosition);for(var r=0;r<t;r++)En(Rn('<li><a href="#"><span class="fp-sr-only">'+he(r,"Slide")+"</span><span></span></a></li>"),cn("ul",n)[0]);pn(n,{"margin-left":"-"+n.innerWidth/2+"px"}),Sn(cn("a",cn("li",n)[0]),Mt)}(e,n)),t.forEach(function(e){pn(e,{width:o+"%"}),m.verticalCentered&&rt(e)});var s=cn(Yt,e)[0];null!=s&&(0!==bn(cn(It),Rt)||0===bn(cn(It),Rt)&&0!==bn(s))?ht(s,"internal"):Sn(t[0],Mt)}function de(e,t){t||null!=cn(It)[0]||Sn(e,Mt),r=cn(It)[0],pn(e,{height:x+"px"}),m.paddingTop&&pn(e,{"padding-top":m.paddingTop}),m.paddingBottom&&pn(e,{"padding-bottom":m.paddingBottom}),void 0!==m.sectionsColor[t]&&pn(e,{"background-color":m.sectionsColor[t]}),void 0!==m.anchors[t]&&e.setAttribute("data-anchor",m.anchors[t])}function pe(e,t){void 0!==m.anchors[t]&&fn(e,Mt)&&tt(m.anchors[t],t),m.menu&&m.css3&&null!=An(cn(m.menu)[0],At)&&cn(m.menu).forEach(function(e){y.appendChild(e)})}function he(e,t){return m.navigationTooltips[e]||m.anchors[e]||t+" "+(e+1)}function ve(){var e=cn(It)[0];Sn(e,_t),Me(e),He(e),m.scrollOverflow&&m.scrollOverflowHandler.afterLoad(),function(){var e=at(Fe().section);return!e||void 0!==e&&bn(e)===bn(r)}()&&Mn(m.afterLoad)&&Ae("afterLoad",{activeSection:null,element:e,direction:null,anchorLink:e.getAttribute("data-anchor"),sectionIndex:bn(e,Rt)}),Mn(m.afterRender)&&Ae("afterRender")}function ge(){var e;if(!m.autoScrolling||m.scrollBar){var t=jn(),n=function(e){var t=P<e?"down":"up";return $=P=e,t}(t),r=0,o=t+dn()/2,i=y.offsetHeight-dn()===t,a=cn(Rt);if(i)r=a.length-1;else if(t)for(var s=0;s<a.length;++s){a[s].offsetTop<=o&&(r=s)}else r=0;if(!function(e){var t=cn(It)[0].offsetTop,n=t+dn();return"up"!=e?t<=jn():n>=jn()+dn()}(n)||fn(cn(It)[0],_t)||(Sn(cn(It)[0],_t),Tn(qn(cn(It)[0]),_t)),!fn(e=a[r],Mt)){_=!0;var l,c,u=cn(It)[0],f=bn(u,Rt)+1,d=nt(e),p=e.getAttribute("data-anchor"),h=bn(e,Rt)+1,v=cn(Yt,e)[0],g={activeSection:u,sectionIndex:h-1,anchorLink:p,element:e,leavingSection:f,direction:d};v&&(c=v.getAttribute("data-anchor"),l=bn(v)),w&&(Sn(e,Mt),Tn(qn(e),Mt),Mn(m.onLeave)&&Ae("onLeave",g),Mn(m.afterLoad)&&Ae("afterLoad",g),Pe(u),Me(e),He(e),tt(p,h-1),m.anchors.length&&(b=p),ct(l,c,p,h)),clearTimeout(E),E=setTimeout(function(){_=!1},100)}m.fitToSection&&(clearTimeout(C),C=setTimeout(function(){m.fitToSection&&cn(It)[0].offsetHeight<=x&&me()},m.fitToSectionDelay))}}function me(){w&&(d=!0,ke(cn(It)[0]),d=!1)}function ye(e){if(h.m[e]){var t="down"===e?te:ee;if(m.scrollOverflow){var n=m.scrollOverflowHandler.scrollable(cn(It)[0]),r="down"===e?"bottom":"top";if(null!=n){if(!m.scrollOverflowHandler.isScrolled(r,n))return!0;t()}else t()}else t()}}function be(e){m.autoScrolling&&we(e)&&h.m.up&&On(e)}function xe(e){var t=An(e.target,Rt)||cn(It)[0];if(we(e)){m.autoScrolling&&On(e);var n=pt(e);B=n.y,F=n.x,cn(Qt,t).length&&Math.abs(I-F)>Math.abs(R-B)?!l&&Math.abs(I-F)>Ct.innerWidth/100*m.touchSensitivity&&(F<I?h.m.right&&oe(t):h.m.left&&ie(t)):m.autoScrolling&&w&&Math.abs(R-B)>Ct.innerHeight/100*m.touchSensitivity&&(B<R?ye("down"):R<B&&ye("up"))}}function we(e){return void 0===e.pointerType||"mouse"!=e.pointerType}function Se(e){if(m.fitToSection&&(q=!1),we(e)){var t=pt(e);R=t.y,I=t.x}}function Te(e,t){for(var n=0,r=e.slice(Math.max(e.length-t,1)),o=0;o<r.length;o++)n+=r[o];return Math.ceil(n/t)}function Ee(e){var t=(new Date).getTime(),n=fn(cn(".fp-completely")[0],$t);if(!h.m.down&&!h.m.up)return On(e),!1;if(m.autoScrolling&&!c&&!n){var r=(e=e||Ct.event).wheelDelta||-e.deltaY||-e.detail,o=Math.max(-1,Math.min(1,r)),i=void 0!==e.wheelDeltaX||void 0!==e.deltaX,a=Math.abs(e.wheelDeltaX)<Math.abs(e.wheelDelta)||Math.abs(e.deltaX)<Math.abs(e.deltaY)||!i;149<p.length&&p.shift(),p.push(Math.abs(r)),m.scrollBar&&On(e);var s=t-W;if(W=t,200<s&&(p=[]),w){var l=Te(p,10);Te(p,70)<=l&&a&&ye(o<0?"down":"up")}return!1}m.fitToSection&&(q=!1)}function Ce(e,t){var n=null==t?cn(It)[0]:t,r=cn(Qt,n)[0];if(!(null==r||l||cn(Ut,r).length<2)){var o=cn(Yt,r)[0],i=null;if(null==(i="left"===e?hn(o,Ut):vn(o,Ut))){if(!m.loopHorizontal)return;var a=qn(o);i="left"===e?a[a.length-1]:a[0]}l=!s.test.isTesting,Ke(r,i,e)}}function Le(){for(var e=cn(Yt),t=0;t<e.length;t++)ht(e[t],"internal")}function ke(e,t,n){if(null!=e){var r,o,i={element:e,callback:t,isMovementUp:n,dtop:function(e){var t=e.offsetHeight,n=e.offsetTop,r=n,o=$<n,i=r-x+t,a=m.bigSectionsDestination;return x<t?(o||a)&&"bottom"!==a||(r=i):(o||d&&null==mn(e))&&(r=i),$=r}(e),yMovement:nt(e),anchorLink:e.getAttribute("data-anchor"),sectionIndex:bn(e,Rt),activeSlide:cn(Yt,e)[0],activeSection:cn(It)[0],leavingSection:bn(cn(It),Rt)+1,localIsResizing:d};if(!(i.activeSection==e&&!d||m.scrollBar&&jn()===i.dtop&&!fn(e,Wt))){if(null!=i.activeSlide&&(r=i.activeSlide.getAttribute("data-anchor"),o=bn(i.activeSlide)),!i.localIsResizing){var a=i.yMovement;if(void 0!==n&&(a=n?"up":"down"),i.direction=a,Mn(m.onLeave)&&!1===Ae("onLeave",i))return}m.autoScrolling&&m.continuousVertical&&void 0!==i.isMovementUp&&(!i.isMovementUp&&"up"==i.yMovement||i.isMovementUp&&"down"==i.yMovement)&&(i=function(e){e.isMovementUp?Dn(cn(It)[0],Bn(e.activeSection,Rt)):Nn(cn(It)[0],Fn(e.activeSection,Rt).reverse());return vt(cn(It)[0].offsetTop),Le(),e.wrapAroundElements=e.activeSection,e.dtop=e.element.offsetTop,e.yMovement=nt(e.element),e.leavingSection=bn(e.activeSection,Rt)+1,e.sectionIndex=bn(e.element,Rt),e}(i)),i.localIsResizing||Pe(i.activeSection),m.scrollOverflow&&m.scrollOverflowHandler.beforeLeave(),Sn(e,Mt),Tn(qn(e),Mt),Me(e),m.scrollOverflow&&m.scrollOverflowHandler.onLeave(),w=s.test.isTesting,ct(o,r,i.anchorLink,i.sectionIndex),function(e){if(m.css3&&m.autoScrolling&&!m.scrollBar){it("translate3d(0px, -"+Math.round(e.dtop)+"px, 0px)",!0),m.scrollingSpeed?(clearTimeout(S),S=setTimeout(function(){qe(e)},m.scrollingSpeed)):qe(e)}else{var t=je(e.dtop);s.test.top=-e.dtop+"px",xt(t.element,t.options,m.scrollingSpeed,function(){m.scrollBar?setTimeout(function(){qe(e)},30):qe(e)})}}(i),b=i.anchorLink,tt(i.anchorLink,i.sectionIndex)}}}function Ae(e,t){var n=function(e,t){var n;n=m.v2compatible?{afterRender:function(){return[f]},onLeave:function(){return[t.activeSection,t.leavingSection,t.sectionIndex+1,t.direction]},afterLoad:function(){return[t.element,t.anchorLink,t.sectionIndex+1]},afterSlideLoad:function(){return[t.destiny,t.anchorLink,t.sectionIndex+1,t.slideAnchor,t.slideIndex]},onSlideLeave:function(){return[t.prevSlide,t.anchorLink,t.sectionIndex+1,t.prevSlideIndex,t.direction,t.slideIndex]}}:{afterRender:function(){return{section:Ne(cn(It)[0]),slide:De(cn(Yt,cn(It)[0])[0])}},onLeave:function(){return{origin:Ne(t.activeSection),destination:Ne(t.element),direction:t.direction}},afterLoad:function(){return n.onLeave()},afterSlideLoad:function(){return{section:Ne(t.section),origin:De(t.prevSlide),destination:De(t.destiny),direction:t.direction}},onSlideLeave:function(){return n.afterSlideLoad()}};return n[e]()}(e,t);if(m.v2compatible){if(!1===m[e].apply(n[0],n.slice(1)))return!1}else if(Hn(f,e,n),!1===m[e].apply(n[Object.keys(n)[0]],function(t){return Object.keys(t).map(function(e){return t[e]})}(n)))return!1;return!0}function Ne(e){return e?new Tt(e):null}function De(e){return e?new Et(e):null}function je(e){var t={};return m.autoScrolling&&!m.scrollBar?(t.options=-e,t.element=cn(At)[0]):(t.options=e,t.element=Ct),t}function qe(e){!function(e){null!=e.wrapAroundElements&&(e.isMovementUp?Dn(cn(Rt)[0],e.wrapAroundElements):Nn(cn(Rt)[cn(Rt).length-1],e.wrapAroundElements),vt(cn(It)[0].offsetTop),Le())}(e),Mn(m.afterLoad)&&!e.localIsResizing&&Ae("afterLoad",e),m.scrollOverflow&&m.scrollOverflowHandler.afterLoad(),e.localIsResizing||He(e.element),Sn(e.element,_t),Tn(qn(e.element),_t),w=!0,Mn(e.callback)&&e.callback()}function Oe(e,t){e.setAttribute(t,e.getAttribute("data-"+t)),e.removeAttribute("data-"+t)}function Me(e){m.lazyLoading&&cn("img[data-src], img[data-srcset], source[data-src], source[data-srcset], video[data-src], audio[data-src], iframe[data-src]",Re(e)).forEach(function(n){if(["src","srcset"].forEach(function(e){var t=n.getAttribute("data-"+e);null!=t&&t&&Oe(n,e)}),_n(n,"source")){var e=An(n,"video, audio");e&&e.load()}})}function He(e){var t=Re(e);cn("video, audio",t).forEach(function(e){e.hasAttribute("data-autoplay")&&"function"==typeof e.play&&e.play()}),cn('iframe[src*="youtube.com/embed/"]',t).forEach(function(e){e.hasAttribute("data-autoplay")&&_e(e),e.onload=function(){e.hasAttribute("data-autoplay")&&_e(e)}})}function _e(e){e.contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}',"*")}function Pe(e){var t=Re(e);cn("video, audio",t).forEach(function(e){e.hasAttribute("data-keepplaying")||"function"!=typeof e.pause||e.pause()}),cn('iframe[src*="youtube.com/embed/"]',t).forEach(function(e){/youtube\.com\/embed\//.test(e.getAttribute("src"))&&!e.hasAttribute("data-keepplaying")&&e.contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}',"*")})}function Re(e){var t=cn(Yt,e);return t.length&&(e=t[0]),e}function Ie(){var e=Fe(),t=e.section,n=e.slide;t&&(m.animateAnchor?st(t,n):ne(t,n))}function Be(){if(!_&&!m.lockAnchors){var e=Fe(),t=e.section,n=e.slide,r=void 0===b,o=void 0===b&&void 0===n&&!l;t&&t.length&&(t&&t!==b&&!r||o||!l&&i!=n)&&st(t,n)}}function Fe(){var e,t,n=Ct.location.hash;if(n.length){var r=n.replace("#","").split("/"),o=-1<n.indexOf("#/");e=o?"/"+r[1]:decodeURIComponent(r[0]);var i=o?r[2]:r[1];i&&i.length&&(t=decodeURIComponent(i))}return{section:e,slide:t}}function We(e){clearTimeout(L);var t=Lt.activeElement,n=e.keyCode;if(9===n)!function(e){var t=e.shiftKey,n=Lt.activeElement,r=Xe(Re(cn(It)[0]));function o(e){return On(e),r[0]?r[0].focus():null}if(function(e){var t=Xe(Lt),n=t.indexOf(Lt.activeElement),r=e.shiftKey?n-1:n+1,o=t[r],i=De(An(o,Ut)),a=Ne(An(o,Rt));return!i&&!a}(e))return;n?null==An(n,It+","+It+" "+Yt)&&(n=o(e)):o(e);(!t&&n==r[r.length-1]||t&&n==r[0])&&On(e)}(e);else if(!_n(t,"textarea")&&!_n(t,"input")&&!_n(t,"select")&&"true"!==t.getAttribute("contentEditable")&&""!==t.getAttribute("contentEditable")&&m.keyboardScrolling&&m.autoScrolling){-1<[40,38,32,33,34].indexOf(n)&&On(e),c=e.ctrlKey,L=setTimeout(function(){!function(e){var t=e.shiftKey;if(!w&&[37,39].indexOf(e.keyCode)<0)return;switch(e.keyCode){case 38:case 33:h.k.up&&ee();break;case 32:if(t&&h.k.up){ee();break}case 40:case 34:h.k.down&&te();break;case 36:h.k.up&&re(1);break;case 35:h.k.down&&re(cn(Rt).length);break;case 37:h.k.left&&ie();break;case 39:h.k.right&&oe();break;default:;}}(e)},150)}}function $e(e){t&&(c=e.ctrlKey)}function ze(e){2==e.which&&(z=e.pageY,f.addEventListener("mousemove",Ye))}function Ve(e){2==e.which&&f.removeEventListener("mousemove",Ye)}function Xe(e){return[].slice.call(cn(N,e)).filter(function(e){return"-1"!==e.getAttribute("tabindex")&&null!==e.offsetParent})}function Ue(){c=t=!1}function Ye(e){w&&(e.pageY<z&&h.m.up?ee():e.pageY>z&&h.m.down&&te()),z=e.pageY}function Ke(e,t,n){var r=An(e,Rt),o={slides:e,destiny:t,direction:n,destinyPos:{left:t.offsetLeft},slideIndex:bn(t),section:r,sectionIndex:bn(r,Rt),anchorLink:r.getAttribute("data-anchor"),slidesNav:cn(tn,r)[0],slideAnchor:ft(t),prevSlide:cn(Yt,r)[0],prevSlideIndex:bn(cn(Yt,r)[0]),localIsResizing:d};o.xMovement=function(e,t){if(e==t)return"none";if(t<e)return"left";return"right"}(o.prevSlideIndex,o.slideIndex),o.direction=o.direction?o.direction:o.xMovement,o.localIsResizing||(w=!1),m.onSlideLeave&&!o.localIsResizing&&"none"!==o.xMovement&&Mn(m.onSlideLeave)&&!1===Ae("onSlideLeave",o)?l=!1:(Sn(t,Mt),Tn(qn(t),Mt),o.localIsResizing||(Pe(o.prevSlide),Me(t)),!m.loopHorizontal&&m.controlArrows&&(Pn(cn(an,r),0!==o.slideIndex),Pn(cn(sn,r),null!=mn(t))),fn(r,Mt)&&!o.localIsResizing&&ct(o.slideIndex,o.slideAnchor,o.anchorLink,o.sectionIndex),function(e,t,n){var r=t.destinyPos;if(m.css3){var o="translate3d(-"+Math.round(r.left)+"px, 0px, 0px)";s.test.translate3dH[t.sectionIndex]=o,pn(Ze(cn(Jt,e)),gt(o)),T=setTimeout(function(){n&&Qe(t)},m.scrollingSpeed)}else s.test.left[t.sectionIndex]=Math.round(r.left),xt(e,Math.round(r.left),m.scrollingSpeed,function(){n&&Qe(t)})}(e,o,!0))}function Qe(e){!function(e,t){m.slidesNavigation&&null!=e&&(Tn(cn(Ht,e),Mt),Sn(cn("a",cn("li",e)[t]),Mt))}(e.slidesNav,e.slideIndex),e.localIsResizing||(Mn(m.afterSlideLoad)&&Ae("afterSlideLoad",e),w=!0,He(e.destiny)),l=!1}function Ge(){if(Je(),a){var e=Lt.activeElement;if(!_n(e,"textarea")&&!_n(e,"input")&&!_n(e,"select")){var t=dn();Math.abs(t-V)>20*Math.max(V,t)/100&&(g=setTimeout(function(){ae(!0),V=t},navigator.userAgent.match("CriOS")?50:0))}}else clearTimeout(g),g=setTimeout(function(){ae(!0)},350)}function Je(){var e=m.responsive||m.responsiveWidth,t=m.responsiveHeight,n=e&&Ct.innerWidth<e,r=t&&Ct.innerHeight<t;e&&t?se(n||r):e?se(n):t&&se(r)}function Ze(e){var t="all "+m.scrollingSpeed+"ms "+m.easingcss3;return Tn(e,Dt),pn(e,{"-webkit-transition":t,transition:t})}function et(e){return Sn(e,Dt)}function tt(e,t){!function(t){cn(m.menu).forEach(function(e){m.menu&&null!=e&&(Tn(cn(Ht,e),Mt),Sn(cn('[data-menuanchor="'+t+'"]',e),Mt))})}(e),function(e,t){m.navigation&&null!=cn(zt)[0]&&(Tn(cn(Ht,cn(zt)[0]),Mt),Sn(e?cn('a[href="#'+e+'"]',cn(zt)[0]):cn("a",cn("li",cn(zt)[0])[t]),Mt))}(e,t)}function nt(e){var t=bn(cn(It)[0],Rt),n=bn(e,Rt);return t==n?"none":n<t?"up":"down"}function rt(e){if(!fn(e,Zt)){var t=Lt.createElement("div");t.className=Bt,t.style.height=ot(e)+"px",Sn(e,Zt),Ln(e,t)}}function ot(e){var t=x;if(m.paddingTop||m.paddingBottom){var n=e;fn(n,Pt)||(n=An(e,Rt));var r=parseInt(getComputedStyle(n)["padding-top"])+parseInt(getComputedStyle(n)["padding-bottom"]);t=x-r}return t}function it(e,t){t?Ze(f):et(f),pn(f,gt(e)),s.test.translate3d=e,setTimeout(function(){Tn(f,Dt)},10)}function at(e){var t=cn(Rt+'[data-anchor="'+e+'"]',f)[0];if(!t){var n=void 0!==e?e-1:0;t=cn(Rt)[n]}return t}function st(e,t){var n=at(e);if(null!=n){var r=function(e,t){var n=cn(Ut+'[data-anchor="'+e+'"]',t)[0];return null==n&&(e=void 0!==e?e:0,n=cn(Ut,t)[e]),n}(t,n);ft(n)===b||fn(n,Mt)?lt(r):ke(n,function(){lt(r)})}}function lt(e){null!=e&&Ke(An(e,Qt),e)}function ct(e,t,n){var r="";m.anchors.length&&!m.lockAnchors&&(e?(null!=n&&(r=n),null==t&&(t=e),ut(r+"/"+(i=t))):(null!=e&&(i=t),ut(n))),dt()}function ut(e){if(m.recordHistory)location.hash=e;else if(a||u)Ct.history.replaceState(void 0,void 0,"#"+e);else{var t=Ct.location.href.split("#")[0];Ct.location.replace(t+"#"+e)}}function ft(e){if(!e)return null;var t=e.getAttribute("data-anchor"),n=bn(e);return null==t&&(t=n),t}function dt(){var e=cn(It)[0],t=cn(Yt,e)[0],n=ft(e),r=ft(t),o=String(n);t&&(o=o+"-"+r),o=o.replace("/","-").replace("#","");var i=new RegExp("\\b\\s?"+Ot+"-[^\\s]+\\b","g");y.className=y.className.replace(i,""),Sn(y,Ot+"-"+o)}function pt(e){var t=[];return t.y=void 0!==e.pageY&&(e.pageY||e.pageX)?e.pageY:e.touches[0].pageY,t.x=void 0!==e.pageX&&(e.pageY||e.pageX)?e.pageX:e.touches[0].pageX,u&&we(e)&&m.scrollBar&&void 0!==e.touches&&(t.y=e.touches[0].pageY,t.x=e.touches[0].pageX),t}function ht(e,t){Y(0,"internal"),void 0!==t&&(d=!0),Ke(An(e,Qt),e),void 0!==t&&(d=!1),Y(O.scrollingSpeed,"internal")}function vt(e){var t=Math.round(e);if(m.css3&&m.autoScrolling&&!m.scrollBar)it("translate3d(0px, -"+t+"px, 0px)",!1);else if(m.autoScrolling&&!m.scrollBar)pn(f,{top:-t+"px"}),s.test.top=-t+"px";else{var n=je(t);wt(n.element,n.options)}}function gt(e){return{"-webkit-transform":e,"-moz-transform":e,"-ms-transform":e,transform:e}}function mt(t,e,n){"all"!==e?h[n][e]=t:Object.keys(h[n]).forEach(function(e){h[n][e]=t})}function yt(e,t,n){m[e]=t,"internal"!==n&&(O[e]=t)}function bt(){var e=m.licenseKey,t="font-size: 15px;background:yellow;";n?e&&e.length<20&&(console.warn("%c This website was made using fullPage.js slider. More info on the following website:",t),console.warn("%c https://alvarotrigo.com/fullPage/",t)):(ln("error","Fullpage.js version 3 has changed its license to GPLv3 and it requires a `licenseKey` option. Read about it here:"),ln("error","https://github.com/alvarotrigo/fullPage.js#options."));fn(cn("html"),qt)?ln("error","Fullpage.js can only be initialized once and you are doing it multiple times!"):(m.continuousVertical&&(m.loopTop||m.loopBottom)&&(m.continuousVertical=!1,ln("warn","Option `loopTop/loopBottom` is mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),!m.scrollOverflow||!m.scrollBar&&m.autoScrolling||ln("warn","Options scrollBar:true and autoScrolling:false are mutually exclusive with scrollOverflow:true. Sections with scrollOverflow might not work well in Firefox"),!m.continuousVertical||!m.scrollBar&&m.autoScrolling||(m.continuousVertical=!1,ln("warn","Scroll bars (`scrollBar:true` or `autoScrolling:false`) are mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),m.scrollOverflow&&null==m.scrollOverflowHandler&&(m.scrollOverflow=!1,ln("error","The option `scrollOverflow:true` requires the file `scrolloverflow.min.js`. Please include it before fullPage.js.")),["fadingEffect","continuousHorizontal","scrollHorizontally","interlockedSlides","resetSliders","responsiveSlides","offsetSections","dragAndMove","scrollOverflowReset","parallax","cards"].forEach(function(e){m[e]&&ln("warn","fullpage.js extensions require fullpage.extensions.min.js file instead of the usual fullpage.js. Requested: "+e)}),m.anchors.forEach(function(t){var e=[].slice.call(cn("[name]")).filter(function(e){return e.getAttribute("name")&&e.getAttribute("name").toLowerCase()==t.toLowerCase()}),n=[].slice.call(cn("[id]")).filter(function(e){return e.getAttribute("id")&&e.getAttribute("id").toLowerCase()==t.toLowerCase()});(n.length||e.length)&&(ln("error","data-anchor tags can not have the same value as any `id` element on the site (or `name` element for IE)."),n.length&&ln("error",'"'+t+'" is is being used by another element `id` property'),e.length&&ln("error",'"'+t+'" is is being used by another element `name` property'))}))}function xt(n,r,o,i){var a=function(e){return e.self!=Ct&&fn(e,Kt)?e.scrollLeft:!m.autoScrolling||m.scrollBar?jn():e.offsetTop}(n),s=r-a,l=0;q=!0;!function e(){if(q){var t=r;l+=20,o&&(t=Ct.fp_easings[m.easing](l,a,s,o)),wt(n,t),l<o?setTimeout(e,20):void 0!==i&&i()}else l<o&&i()}()}function wt(e,t){!m.autoScrolling||m.scrollBar||e.self!=Ct&&fn(e,Kt)?e.self!=Ct&&fn(e,Kt)?e.scrollLeft=t:e.scrollTo(0,t):e.style.top=t+"px"}function St(e,t){this.anchor=e.getAttribute("data-anchor"),this.item=e,this.index=bn(e,t),this.isLast=this.index===e.parentElement.querySelectorAll(t).length-1,this.isFirst=!this.index}function Tt(e){St.call(this,e,Rt)}function Et(e){St.call(this,e,Ut)}bt()}}),window.jQuery&&window.fullpage&&function(t,n){t&&n?t.fn.fullpage=function(e){e.$=t,new n(this[0],e)}:window.fp_utils.showError("error","jQuery is required to use the jQuery fullpage adapter!")}(window.jQuery,window.fullpage);var player=void 0;function onYouTubeIframeAPIReady(){var e=370;window.matchMedia("(max-width: 768px)").matches&&(e=332),window.matchMedia("(max-width: 480px)").matches&&(e=220),player=new YT.Player("yt-player",{width:"100%",height:e,videoId:"M7lc1UVf-VE",playerVars:{controls:0,disablekb:0,showinfo:0,rel:0,autoplay:0,modestbranding:0,wmode:"opaque"},events:{onReady:onPlayerReady,onStateChange:onPlayerStateChange}})}function onPlayerReady(e){var t=player.getDuration(),n=void 0;updateTimerDisplay(),$(".player").removeClass("hidden"),clearInterval(n),n=setInterval(function(){changeButtonPosition(player.getCurrentTime()/t*100),updateTimerDisplay()},1e3)}function onPlayerStateChange(e){var t=$(".player__start");switch(e.data){case 1:$(".player__wrapper").addClass("active"),t.addClass("paused");break;case 2:t.removeClass("paused")}}function changeButtonPosition(e){$(".player__playback-button").css({left:e+"%"})}function updateTimerDisplay(){$(".player__duration-completed").text(formatTime(player.getCurrentTime())),$(".player__duration-estimate").text(formatTime(player.getDuration()))}function formatTime(e){var t=Math.round(e),n=Math.floor(t/60),r=t-60*n;return n+":"+(r<10?"0"+r:r)}document.addEventListener("DOMContentLoaded",function(e){$(".player__start").on("click",function(e){1!==player.getPlayerState()?player.playVideo():player.pauseVideo()}),$(".player__playback").on("click",function(e){e.preventDefault();var t=$(e.currentTarget),n=(e.pageX-t.offset().left)/t.width()*100,r=player.getDuration()/100*n;changeButtonPosition(n),player.seekTo(r)}),$(".player__splash").on("click",function(e){player.playVideo()}),$(".player__volume-button").on("click",function(){var e=$(this);player.isMuted()?(player.unMute(),e.removeClass("mute")):(player.mute(),e.addClass("mute"))})}),function(e,t){"object"===("undefined"==typeof module?"undefined":_typeof(module))&&"object"===_typeof(module.exports)?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:void 0,function(T,e){function v(e){return null!=e&&e===e.window}var t=[],E=T.document,r=Object.getPrototypeOf,s=t.slice,g=t.concat,l=t.push,o=t.indexOf,n={},i=n.toString,m=n.hasOwnProperty,a=m.toString,c=a.call(Object),y={},b=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},u={type:!0,src:!0,nonce:!0,noModule:!0};function x(e,t,n){var r,o,i=(n=n||E).createElement("script");if(i.text=e,t)for(r in u)(o=t[r]||t.getAttribute&&t.getAttribute(r))&&i.setAttribute(r,o);n.head.appendChild(i).parentNode.removeChild(i)}function w(e){return null==e?e+"":"object"===_typeof(e)||"function"==typeof e?n[i.call(e)]||"object":_typeof(e)}var C=function e(t,n){return new e.fn.init(t,n)},f=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function d(e){var t=!!e&&"length"in e&&e.length,n=w(e);return!b(e)&&!v(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}C.fn=C.prototype={jquery:"3.4.1",constructor:C,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=C.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return C.each(this,e)},map:function(n){return this.pushStack(C.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:t.sort,splice:t.splice},C.extend=C.fn.extend=function(){var e,t,n,r,o,i,a=arguments[0]||{},s=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"===_typeof(a)||b(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(c&&r&&(C.isPlainObject(r)||(o=Array.isArray(r)))?(n=a[t],i=o&&!Array.isArray(n)?[]:o||C.isPlainObject(n)?n:{},o=!1,a[t]=C.extend(c,i,r)):void 0!==r&&(a[t]=r));return a},C.extend({expando:"jQuery"+("3.4.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==i.call(e))&&(!(t=r(e))||"function"==typeof(n=m.call(t,"constructor")&&t.constructor)&&a.call(n)===c)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t){x(e,{nonce:t&&t.nonce})},each:function(e,t){var n,r=0;if(d(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(f,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(d(Object(e))?C.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:o.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,o=e.length;r<n;r++)e[o++]=t[r];return e.length=o,e},grep:function(e,t,n){for(var r=[],o=0,i=e.length,a=!n;o<i;o++)!t(e[o],o)!=a&&r.push(e[o]);return r},map:function(e,t,n){var r,o,i=0,a=[];if(d(e))for(r=e.length;i<r;i++)null!=(o=t(e[i],i,n))&&a.push(o);else for(i in e)null!=(o=t(e[i],i,n))&&a.push(o);return g.apply([],a)},guid:1,support:y}),"function"==typeof Symbol&&(C.fn[Symbol.iterator]=t[Symbol.iterator]),C.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var p=function(n){function f(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(65536+r):String.fromCharCode(r>>10|55296,1023&r|56320)}function o(){S()}var e,p,x,i,a,h,d,v,w,l,c,S,T,s,E,g,u,m,y,C="sizzle"+1*new Date,b=n.document,L=0,r=0,k=le(),A=le(),N=le(),D=le(),j=function(e,t){return e===t&&(c=!0),0},q={}.hasOwnProperty,t=[],O=t.pop,M=t.push,H=t.push,_=t.slice,P=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",I="[\\x20\\t\\r\\n\\f]",B="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",F="\\["+I+"*("+B+")(?:"+I+"*([*^$|!~]?=)"+I+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+B+"))|)"+I+"*\\]",W=":("+B+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+F+")*)|.*)\\)|)",$=new RegExp(I+"+","g"),z=new RegExp("^"+I+"+|((?:^|[^\\\\])(?:\\\\.)*)"+I+"+$","g"),V=new RegExp("^"+I+"*,"+I+"*"),X=new RegExp("^"+I+"*([>+~]|"+I+")"+I+"*"),U=new RegExp(I+"|>"),Y=new RegExp(W),K=new RegExp("^"+B+"$"),Q={ID:new RegExp("^#("+B+")"),CLASS:new RegExp("^\\.("+B+")"),TAG:new RegExp("^("+B+"|[*])"),ATTR:new RegExp("^"+F),PSEUDO:new RegExp("^"+W),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+I+"*(even|odd|(([+-]|)(\\d*)n|)"+I+"*(?:([+-]|)"+I+"*(\\d+)|))"+I+"*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^"+I+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+I+"*((?:-\\d)?\\d*)"+I+"*\\)|)(?=[^-]|$)","i")},G=/HTML$/i,J=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,ee=/^[^{]+\{\s*\[native \w/,te=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ne=/[+~]/,re=new RegExp("\\\\([\\da-f]{1,6}"+I+"?|("+I+")|.)","ig"),oe=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ae=xe(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{H.apply(t=_.call(b.childNodes),b.childNodes),t[b.childNodes.length].nodeType}catch(e){H={apply:t.length?function(e,t){M.apply(e,_.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function se(t,e,n,r){var o,i,a,s,l,c,u,f=e&&e.ownerDocument,d=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==d&&9!==d&&11!==d)return n;if(!r&&((e?e.ownerDocument||e:b)!==T&&S(e),e=e||T,E)){if(11!==d&&(l=te.exec(t)))if(o=l[1]){if(9===d){if(!(a=e.getElementById(o)))return n;if(a.id===o)return n.push(a),n}else if(f&&(a=f.getElementById(o))&&y(e,a)&&a.id===o)return n.push(a),n}else{if(l[2])return H.apply(n,e.getElementsByTagName(t)),n;if((o=l[3])&&p.getElementsByClassName&&e.getElementsByClassName)return H.apply(n,e.getElementsByClassName(o)),n}if(p.qsa&&!D[t+" "]&&(!g||!g.test(t))&&(1!==d||"object"!==e.nodeName.toLowerCase())){if(u=t,f=e,1===d&&U.test(t)){for((s=e.getAttribute("id"))?s=s.replace(oe,ie):e.setAttribute("id",s=C),i=(c=h(t)).length;i--;)c[i]="#"+s+" "+be(c[i]);u=c.join(","),f=ne.test(t)&&me(e.parentNode)||e}try{return H.apply(n,f.querySelectorAll(u)),n}catch(e){D(t,!0)}finally{s===C&&e.removeAttribute("id")}}}return v(t.replace(z,"$1"),e,n,r)}function le(){var r=[];return function e(t,n){return r.push(t+" ")>x.cacheLength&&delete e[r.shift()],e[t+" "]=n}}function ce(e){return e[C]=!0,e}function ue(e){var t=T.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){for(var n=e.split("|"),r=n.length;r--;)x.attrHandle[n[r]]=t}function de(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function pe(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function he(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}function ve(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ae(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function ge(a){return ce(function(i){return i=+i,ce(function(e,t){for(var n,r=a([],e.length,i),o=r.length;o--;)e[n=r[o]]&&(e[n]=!(t[n]=e[n]))})})}function me(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in p=se.support={},a=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!G.test(t||n&&n.nodeName||"HTML")},S=se.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:b;return r!==T&&9===r.nodeType&&r.documentElement&&(s=(T=r).documentElement,E=!a(T),b!==T&&(n=T.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",o,!1):n.attachEvent&&n.attachEvent("onunload",o)),p.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),p.getElementsByTagName=ue(function(e){return e.appendChild(T.createComment("")),!e.getElementsByTagName("*").length}),p.getElementsByClassName=ee.test(T.getElementsByClassName),p.getById=ue(function(e){return s.appendChild(e).id=C,!T.getElementsByName||!T.getElementsByName(C).length}),p.getById?(x.filter.ID=function(e){var t=e.replace(re,f);return function(e){return e.getAttribute("id")===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&E){var n=t.getElementById(e);return n?[n]:[]}}):(x.filter.ID=function(e){var n=e.replace(re,f);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&E){var n,r,o,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(o=t.getElementsByName(e),r=0;i=o[r++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),x.find.TAG=p.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):p.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],o=0,i=t.getElementsByTagName(e);if("*"!==e)return i;for(;n=i[o++];)1===n.nodeType&&r.push(n);return r},x.find.CLASS=p.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&E)return t.getElementsByClassName(e)},u=[],g=[],(p.qsa=ee.test(T.querySelectorAll))&&(ue(function(e){s.appendChild(e).innerHTML="<a id='"+C+"'></a><select id='"+C+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+I+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+I+"*(?:value|"+R+")"),e.querySelectorAll("[id~="+C+"-]").length||g.push("~="),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+C+"+*").length||g.push(".#.+[+~]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=T.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+I+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),s.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(p.matchesSelector=ee.test(m=s.matches||s.webkitMatchesSelector||s.mozMatchesSelector||s.oMatchesSelector||s.msMatchesSelector))&&ue(function(e){p.disconnectedMatch=m.call(e,"*"),m.call(e,"[s!='']:x"),u.push("!=",W)}),g=g.length&&new RegExp(g.join("|")),u=u.length&&new RegExp(u.join("|")),t=ee.test(s.compareDocumentPosition),y=t||ee.test(s.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},j=t?function(e,t){if(e===t)return c=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!p.sortDetached&&t.compareDocumentPosition(e)===n?e===T||e.ownerDocument===b&&y(b,e)?-1:t===T||t.ownerDocument===b&&y(b,t)?1:l?P(l,e)-P(l,t):0:4&n?-1:1)}:function(e,t){if(e===t)return c=!0,0;var n,r=0,o=e.parentNode,i=t.parentNode,a=[e],s=[t];if(!o||!i)return e===T?-1:t===T?1:o?-1:i?1:l?P(l,e)-P(l,t):0;if(o===i)return de(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?de(a[r],s[r]):a[r]===b?-1:s[r]===b?1:0}),T},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if((e.ownerDocument||e)!==T&&S(e),p.matchesSelector&&E&&!D[t+" "]&&(!u||!u.test(t))&&(!g||!g.test(t)))try{var n=m.call(e,t);if(n||p.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){D(t,!0)}return 0<se(t,T,null,[e]).length},se.contains=function(e,t){return(e.ownerDocument||e)!==T&&S(e),y(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!==T&&S(e);var n=x.attrHandle[t.toLowerCase()],r=n&&q.call(x.attrHandle,t.toLowerCase())?n(e,t,!E):void 0;return void 0!==r?r:p.attributes||!E?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},se.escape=function(e){return(e+"").replace(oe,ie)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,n=[],r=0,o=0;if(c=!p.detectDuplicates,l=!p.sortStable&&e.slice(0),e.sort(j),c){for(;t=e[o++];)t===e[o]&&(r=n.push(o));for(;r--;)e.splice(n[r],1)}return l=null,e},i=se.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[r++];)n+=i(t);return n},(x=se.selectors={cacheLength:50,createPseudo:ce,match:Q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(re,f),e[3]=(e[3]||e[4]||e[5]||"").replace(re,f),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Q.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&Y.test(n)&&(t=h(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(re,f).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=k[e+" "];return t||(t=new RegExp("(^|"+I+")"+e+"("+I+"|$)"))&&k(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,r,o){return function(e){var t=se.attr(e,n);return null==t?"!="===r:!r||(t+="","="===r?t===o:"!="===r?t!==o:"^="===r?o&&0===t.indexOf(o):"*="===r?o&&-1<t.indexOf(o):"$="===r?o&&t.slice(-o.length)===o:"~="===r?-1<(" "+t.replace($," ")+" ").indexOf(o):"|="===r&&(t===o||t.slice(0,o.length+1)===o+"-"))}},CHILD:function(h,e,t,v,g){var m="nth"!==h.slice(0,3),y="last"!==h.slice(-4),b="of-type"===e;return 1===v&&0===g?function(e){return!!e.parentNode}:function(e,t,n){var r,o,i,a,s,l,c=m!=y?"nextSibling":"previousSibling",u=e.parentNode,f=b&&e.nodeName.toLowerCase(),d=!n&&!b,p=!1;if(u){if(m){for(;c;){for(a=e;a=a[c];)if(b?a.nodeName.toLowerCase()===f:1===a.nodeType)return!1;l=c="only"===h&&!l&&"nextSibling"}return!0}if(l=[y?u.firstChild:u.lastChild],y&&d){for(p=(s=(r=(o=(i=(a=u)[C]||(a[C]={}))[a.uniqueID]||(i[a.uniqueID]={}))[h]||[])[0]===L&&r[1])&&r[2],a=s&&u.childNodes[s];a=++s&&a&&a[c]||(p=s=0)||l.pop();)if(1===a.nodeType&&++p&&a===e){o[h]=[L,s,p];break}}else if(d&&(p=s=(r=(o=(i=(a=e)[C]||(a[C]={}))[a.uniqueID]||(i[a.uniqueID]={}))[h]||[])[0]===L&&r[1]),!1===p)for(;(a=++s&&a&&a[c]||(p=s=0)||l.pop())&&((b?a.nodeName.toLowerCase()!==f:1!==a.nodeType)||!++p||(d&&((o=(i=a[C]||(a[C]={}))[a.uniqueID]||(i[a.uniqueID]={}))[h]=[L,p]),a!==e)););return(p-=g)===v||p%v==0&&0<=p/v}}},PSEUDO:function(e,i){var t,a=x.pseudos[e]||x.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return a[C]?a(i):1<a.length?(t=[e,e,"",i],x.setFilters.hasOwnProperty(e.toLowerCase())?ce(function(e,t){for(var n,r=a(e,i),o=r.length;o--;)e[n=P(e,r[o])]=!(t[n]=r[o])}):function(e){return a(e,0,t)}):a}},pseudos:{not:ce(function(e){var r=[],o=[],s=d(e.replace(z,"$1"));return s[C]?ce(function(e,t,n,r){for(var o,i=s(e,null,r,[]),a=e.length;a--;)(o=i[a])&&(e[a]=!(t[a]=o))}):function(e,t,n){return r[0]=e,s(r,null,n,o),r[0]=null,!o.pop()}}),has:ce(function(t){return function(e){return 0<se(t,e).length}}),contains:ce(function(t){return t=t.replace(re,f),function(e){return-1<(e.textContent||i(e)).indexOf(t)}}),lang:ce(function(n){return K.test(n||"")||se.error("unsupported lang: "+n),n=n.replace(re,f).toLowerCase(),function(e){var t;do{if(t=E?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===s},focus:function(e){return e===T.activeElement&&(!T.hasFocus||T.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ve(!1),disabled:ve(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return Z.test(e.nodeName)},input:function(e){return J.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ge(function(){return[0]}),last:ge(function(e,t){return[t-1]}),eq:ge(function(e,t,n){return[n<0?n+t:n]}),even:ge(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ge(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ge(function(e,t,n){for(var r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:ge(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=x.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[e]=pe(e);for(e in{submit:!0,reset:!0})x.pseudos[e]=he(e);function ye(){}function be(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function xe(s,e,t){var l=e.dir,c=e.next,u=c||l,f=t&&"parentNode"===u,d=r++;return e.first?function(e,t,n){for(;e=e[l];)if(1===e.nodeType||f)return s(e,t,n);return!1}:function(e,t,n){var r,o,i,a=[L,d];if(n){for(;e=e[l];)if((1===e.nodeType||f)&&s(e,t,n))return!0}else for(;e=e[l];)if(1===e.nodeType||f)if(o=(i=e[C]||(e[C]={}))[e.uniqueID]||(i[e.uniqueID]={}),c&&c===e.nodeName.toLowerCase())e=e[l]||e;else{if((r=o[u])&&r[0]===L&&r[1]===d)return a[2]=r[2];if((o[u]=a)[2]=s(e,t,n))return!0}return!1}}function we(o){return 1<o.length?function(e,t,n){for(var r=o.length;r--;)if(!o[r](e,t,n))return!1;return!0}:o[0]}function Se(e,t,n,r,o){for(var i,a=[],s=0,l=e.length,c=null!=t;s<l;s++)(i=e[s])&&(n&&!n(i,r,o)||(a.push(i),c&&t.push(s)));return a}function Te(p,h,v,g,m,e){return g&&!g[C]&&(g=Te(g)),m&&!m[C]&&(m=Te(m,e)),ce(function(e,t,n,r){var o,i,a,s=[],l=[],c=t.length,u=e||function(e,t,n){for(var r=0,o=t.length;r<o;r++)se(e,t[r],n);return n}(h||"*",n.nodeType?[n]:n,[]),f=!p||!e&&h?u:Se(u,s,p,n,r),d=v?m||(e?p:c||g)?[]:t:f;if(v&&v(f,d,n,r),g)for(o=Se(d,l),g(o,[],n,r),i=o.length;i--;)(a=o[i])&&(d[l[i]]=!(f[l[i]]=a));if(e){if(m||p){if(m){for(o=[],i=d.length;i--;)(a=d[i])&&o.push(f[i]=a);m(null,d=[],o,r)}for(i=d.length;i--;)(a=d[i])&&-1<(o=m?P(e,a):s[i])&&(e[o]=!(t[o]=a))}}else d=Se(d===t?d.splice(c,d.length):d),m?m(null,t,d,r):H.apply(t,d)})}function Ee(e){for(var o,t,n,r=e.length,i=x.relative[e[0].type],a=i||x.relative[" "],s=i?1:0,l=xe(function(e){return e===o},a,!0),c=xe(function(e){return-1<P(o,e)},a,!0),u=[function(e,t,n){var r=!i&&(n||t!==w)||((o=t).nodeType?l(e,t,n):c(e,t,n));return o=null,r}];s<r;s++)if(t=x.relative[e[s].type])u=[xe(we(u),t)];else{if((t=x.filter[e[s].type].apply(null,e[s].matches))[C]){for(n=++s;n<r&&!x.relative[e[n].type];n++);return Te(1<s&&we(u),1<s&&be(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(z,"$1"),t,s<n&&Ee(e.slice(s,n)),n<r&&Ee(e=e.slice(n)),n<r&&be(e))}u.push(t)}return we(u)}return ye.prototype=x.filters=x.pseudos,x.setFilters=new ye,h=se.tokenize=function(e,t){var n,r,o,i,a,s,l,c=A[e+" "];if(c)return t?0:c.slice(0);for(a=e,s=[],l=x.preFilter;a;){for(i in n&&!(r=V.exec(a))||(r&&(a=a.slice(r[0].length)||a),s.push(o=[])),n=!1,(r=X.exec(a))&&(n=r.shift(),o.push({value:n,type:r[0].replace(z," ")}),a=a.slice(n.length)),x.filter)!(r=Q[i].exec(a))||l[i]&&!(r=l[i](r))||(n=r.shift(),o.push({value:n,type:i,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?se.error(e):A(e,s).slice(0)},d=se.compile=function(e,t){var n,r=[],o=[],i=N[e+" "];if(!i){for(n=(t=t||h(e)).length;n--;)(i=Ee(t[n]))[C]?r.push(i):o.push(i);(i=N(e,function(g,m){function e(e,t,n,r,o){var i,a,s,l=0,c="0",u=e&&[],f=[],d=w,p=e||b&&x.find.TAG("*",o),h=L+=null==d?1:Math.random()||.1,v=p.length;for(o&&(w=t===T||t||o);c!==v&&null!=(i=p[c]);c++){if(b&&i){for(a=0,t||i.ownerDocument===T||(S(i),n=!E);s=g[a++];)if(s(i,t||T,n)){r.push(i);break}o&&(L=h)}y&&((i=!s&&i)&&l--,e&&u.push(i))}if(l+=c,y&&c!==l){for(a=0;s=m[a++];)s(u,f,t,n);if(e){if(0<l)for(;c--;)u[c]||f[c]||(f[c]=O.call(r));f=Se(f)}H.apply(r,f),o&&!e&&0<f.length&&1<l+m.length&&se.uniqueSort(r)}return o&&(L=h,w=d),u}var y=0<m.length,b=0<g.length;return y?ce(e):e}(o,r))).selector=e}return i},v=se.select=function(e,t,n,r){var o,i,a,s,l,c="function"==typeof e&&e,u=!r&&h(e=c.selector||e);if(n=n||[],1===u.length){if(2<(i=u[0]=u[0].slice(0)).length&&"ID"===(a=i[0]).type&&9===t.nodeType&&E&&x.relative[i[1].type]){if(!(t=(x.find.ID(a.matches[0].replace(re,f),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(i.shift().value.length)}for(o=Q.needsContext.test(e)?0:i.length;o--&&(a=i[o],!x.relative[s=a.type]);)if((l=x.find[s])&&(r=l(a.matches[0].replace(re,f),ne.test(i[0].type)&&me(t.parentNode)||t))){if(i.splice(o,1),!(e=r.length&&be(i)))return H.apply(n,r),n;break}}return(c||d(e,u))(r,t,!E,n,!t||ne.test(e)&&me(t.parentNode)||t),n},p.sortStable=C.split("").sort(j).join("")===C,p.detectDuplicates=!!c,S(),p.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(T.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||fe("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),p.attributes&&ue(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||fe("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||fe(R,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),se}(T);C.find=p,C.expr=p.selectors,C.expr[":"]=C.expr.pseudos,C.uniqueSort=C.unique=p.uniqueSort,C.text=p.getText,C.isXMLDoc=p.isXML,C.contains=p.contains,C.escapeSelector=p.escape;function h(e,t,n){for(var r=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&C(e).is(n))break;r.push(e)}return r}function S(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}var L=C.expr.match.needsContext;function k(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var A=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function N(e,n,r){return b(n)?C.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?C.grep(e,function(e){return e===n!==r}):"string"!=typeof n?C.grep(e,function(e){return-1<o.call(n,e)!==r}):C.filter(n,e,r)}C.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?C.find.matchesSelector(r,e)?[r]:[]:C.find.matches(e,C.grep(t,function(e){return 1===e.nodeType}))},C.fn.extend({find:function(e){var t,n,r=this.length,o=this;if("string"!=typeof e)return this.pushStack(C(e).filter(function(){for(t=0;t<r;t++)if(C.contains(o[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)C.find(e,o[t],n);return 1<r?C.uniqueSort(n):n},filter:function(e){return this.pushStack(N(this,e||[],!1))},not:function(e){return this.pushStack(N(this,e||[],!0))},is:function(e){return!!N(this,"string"==typeof e&&L.test(e)?C(e):e||[],!1).length}});var D,j=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(C.fn.init=function(e,t,n){var r,o;if(!e)return this;if(n=n||D,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==n.ready?n.ready(e):e(C):C.makeArray(e,this);if(!(r="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:j.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof C?t[0]:t,C.merge(this,C.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:E,!0)),A.test(r[1])&&C.isPlainObject(t))for(r in t)b(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(o=E.getElementById(r[2]))&&(this[0]=o,this.length=1),this}).prototype=C.fn,D=C(E);var q=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function M(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}C.fn.extend({has:function(e){var t=C(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(C.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,o=this.length,i=[],a="string"!=typeof e&&C(e);if(!L.test(e))for(;r<o;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&C.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(1<i.length?C.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?o.call(C(e),this[0]):o.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(C.uniqueSort(C.merge(this.get(),C(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),C.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return h(e,"parentNode")},parentsUntil:function(e,t,n){return h(e,"parentNode",n)},next:function(e){return M(e,"nextSibling")},prev:function(e){return M(e,"previousSibling")},nextAll:function(e){return h(e,"nextSibling")},prevAll:function(e){return h(e,"previousSibling")},nextUntil:function(e,t,n){return h(e,"nextSibling",n)},prevUntil:function(e,t,n){return h(e,"previousSibling",n)},siblings:function(e){return S((e.parentNode||{}).firstChild,e)},children:function(e){return S(e.firstChild)},contents:function(e){return void 0!==e.contentDocument?e.contentDocument:(k(e,"template")&&(e=e.content||e),C.merge([],e.childNodes))}},function(r,o){C.fn[r]=function(e,t){var n=C.map(this,o,e);return"Until"!==r.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=C.filter(t,n)),1<this.length&&(O[r]||C.uniqueSort(n),q.test(r)&&n.reverse()),this.pushStack(n)}});var H=/[^\x20\t\r\n\f]+/g;function _(e){return e}function P(e){throw e}function R(e,t,n,r){var o;try{e&&b(o=e.promise)?o.call(e).done(t).fail(n):e&&b(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}C.Callbacks=function(r){r="string"==typeof r?function(e){var n={};return C.each(e.match(H)||[],function(e,t){n[t]=!0}),n}(r):C.extend({},r);function n(){for(i=i||r.once,t=o=!0;s.length;l=-1)for(e=s.shift();++l<a.length;)!1===a[l].apply(e[0],e[1])&&r.stopOnFalse&&(l=a.length,e=!1);r.memory||(e=!1),o=!1,i&&(a=e?[]:"")}var o,e,t,i,a=[],s=[],l=-1,c={add:function(){return a&&(e&&!o&&(l=a.length-1,s.push(e)),function n(e){C.each(e,function(e,t){b(t)?r.unique&&c.has(t)||a.push(t):t&&t.length&&"string"!==w(t)&&n(t)})}(arguments),e&&!o&&n()),this},remove:function(){return C.each(arguments,function(e,t){for(var n;-1<(n=C.inArray(t,a,n));)a.splice(n,1),n<=l&&l--}),this},has:function(e){return e?-1<C.inArray(e,a):0<a.length},empty:function(){return a=a&&[],this},disable:function(){return i=s=[],a=e="",this},disabled:function(){return!a},lock:function(){return i=s=[],e||o||(a=e=""),this},locked:function(){return!!i},fireWith:function(e,t){return i||(t=[e,(t=t||[]).slice?t.slice():t],s.push(t),o||n()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!t}};return c},C.extend({Deferred:function(e){var i=[["notify","progress",C.Callbacks("memory"),C.Callbacks("memory"),2],["resolve","done",C.Callbacks("once memory"),C.Callbacks("once memory"),0,"resolved"],["reject","fail",C.Callbacks("once memory"),C.Callbacks("once memory"),1,"rejected"]],o="pending",a={state:function(){return o},always:function(){return s.done(arguments).fail(arguments),this},catch:function(e){return a.then(null,e)},pipe:function(){var o=arguments;return C.Deferred(function(r){C.each(i,function(e,t){var n=b(o[t[4]])&&o[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&b(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+"With"](this,n?[e]:arguments)})}),o=null}).promise()},then:function(t,n,r){var l=0;function c(o,i,a,s){return function(){function e(){var e,t;if(!(o<l)){if((e=a.apply(n,r))===i.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"===_typeof(e)||"function"==typeof e)&&e.then,b(t)?s?t.call(e,c(l,i,_,s),c(l,i,P,s)):(l++,t.call(e,c(l,i,_,s),c(l,i,P,s),c(l,i,_,i.notifyWith))):(a!==_&&(n=void 0,r=[e]),(s||i.resolveWith)(n,r))}}var n=this,r=arguments,t=s?e:function(){try{e()}catch(e){C.Deferred.exceptionHook&&C.Deferred.exceptionHook(e,t.stackTrace),l<=o+1&&(a!==P&&(n=void 0,r=[e]),i.rejectWith(n,r))}};o?t():(C.Deferred.getStackHook&&(t.stackTrace=C.Deferred.getStackHook()),T.setTimeout(t))}}return C.Deferred(function(e){i[0][3].add(c(0,e,b(r)?r:_,e.notifyWith)),i[1][3].add(c(0,e,b(t)?t:_)),i[2][3].add(c(0,e,b(n)?n:P))}).promise()},promise:function(e){return null!=e?C.extend(e,a):a}},s={};return C.each(i,function(e,t){var n=t[2],r=t[5];a[t[1]]=n.add,r&&n.add(function(){o=r},i[3-e][2].disable,i[3-e][3].disable,i[0][2].lock,i[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+"With"](this===s?void 0:this,arguments),this},s[t[0]+"With"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){function t(t){return function(e){o[t]=this,i[t]=1<arguments.length?s.call(arguments):e,--n||a.resolveWith(o,i)}}var n=arguments.length,r=n,o=Array(r),i=s.call(arguments),a=C.Deferred();if(n<=1&&(R(e,a.done(t(r)).resolve,a.reject,!n),"pending"===a.state()||b(i[r]&&i[r].then)))return a.then();for(;r--;)R(i[r],t(r),a.reject);return a.promise()}});var I=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;C.Deferred.exceptionHook=function(e,t){T.console&&T.console.warn&&e&&I.test(e.name)&&T.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},C.readyException=function(e){T.setTimeout(function(){throw e})};var B=C.Deferred();function F(){E.removeEventListener("DOMContentLoaded",F),T.removeEventListener("load",F),C.ready()}C.fn.ready=function(e){return B.then(e).catch(function(e){C.readyException(e)}),this},C.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--C.readyWait:C.isReady)||(C.isReady=!0)!==e&&0<--C.readyWait||B.resolveWith(E,[C])}}),C.ready.then=B.then,"complete"===E.readyState||"loading"!==E.readyState&&!E.documentElement.doScroll?T.setTimeout(C.ready):(E.addEventListener("DOMContentLoaded",F),T.addEventListener("load",F));function W(e,t,n,r,o,i,a){var s=0,l=e.length,c=null==n;if("object"===w(n))for(s in o=!0,n)W(e,t,s,n[s],!0,i,a);else if(void 0!==r&&(o=!0,b(r)||(a=!0),c&&(t=a?(t.call(e,r),null):(c=t,function(e,t,n){return c.call(C(e),n)})),t))for(;s<l;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return o?e:c?t.call(e):l?t(e[0],n):i}var $=/^-ms-/,z=/-([a-z])/g;function V(e,t){return t.toUpperCase()}function X(e){return e.replace($,"ms-").replace(z,V)}function U(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function Y(){this.expando=C.expando+Y.uid++}Y.uid=1,Y.prototype={cache:function(e){var t=e[this.expando];return t||(t={},U(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,o=this.cache(e);if("string"==typeof t)o[X(t)]=n;else for(r in t)o[X(r)]=t[r];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][X(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(X):(t=X(t))in r?[t]:t.match(H)||[]).length;for(;n--;)delete r[t[n]]}void 0!==t&&!C.isEmptyObject(r)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!C.isEmptyObject(t)}};var K=new Y,Q=new Y,G=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,J=/[A-Z]/g;function Z(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(J,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:G.test(e)?JSON.parse(e):e)}(n)}catch(e){}Q.set(e,t,n)}else n=void 0;return n}C.extend({hasData:function(e){return Q.hasData(e)||K.hasData(e)},data:function(e,t,n){return Q.access(e,t,n)},removeData:function(e,t){Q.remove(e,t)},_data:function(e,t,n){return K.access(e,t,n)},_removeData:function(e,t){K.remove(e,t)}}),C.fn.extend({data:function(n,e){var t,r,o,i=this[0],a=i&&i.attributes;if(void 0!==n)return"object"===_typeof(n)?this.each(function(){Q.set(this,n)}):W(this,function(e){var t;if(i&&void 0===e)return void 0!==(t=Q.get(i,n))?t:void 0!==(t=Z(i,n))?t:void 0;this.each(function(){Q.set(this,n,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(o=Q.get(i),1===i.nodeType&&!K.get(i,"hasDataAttrs"))){for(t=a.length;t--;)a[t]&&0===(r=a[t].name).indexOf("data-")&&(r=X(r.slice(5)),Z(i,r,o[r]));K.set(i,"hasDataAttrs",!0)}return o},removeData:function(e){return this.each(function(){Q.remove(this,e)})}}),C.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=K.get(e,t),n&&(!r||Array.isArray(n)?r=K.access(e,t,C.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=C.queue(e,t),r=n.length,o=n.shift(),i=C._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),r--),o&&("fx"===t&&n.unshift("inprogress"),delete i.stop,o.call(e,function(){C.dequeue(e,t)},i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return K.get(e,n)||K.access(e,n,{empty:C.Callbacks("once memory").add(function(){K.remove(e,[t+"queue",n])})})}}),C.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?C.queue(this[0],t):void 0===n?this:this.each(function(){var e=C.queue(this,t,n);C._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&C.dequeue(this,t)})},dequeue:function(e){return this.each(function(){C.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function n(){--o||i.resolveWith(a,[a])}var r,o=1,i=C.Deferred(),a=this,s=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(r=K.get(a[s],e+"queueHooks"))&&r.empty&&(o++,r.empty.add(n));return n(),i.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i"),ne=["Top","Right","Bottom","Left"],re=E.documentElement,oe=function(e){return C.contains(e.ownerDocument,e)},ie={composed:!0};re.getRootNode&&(oe=function(e){return C.contains(e.ownerDocument,e)||e.getRootNode(ie)===e.ownerDocument});function ae(e,t,n,r){var o,i,a={};for(i in t)a[i]=e.style[i],e.style[i]=t[i];for(i in o=n.apply(e,r||[]),t)e.style[i]=a[i];return o}var se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&oe(e)&&"none"===C.css(e,"display")};function le(e,t,n,r){var o,i,a=20,s=r?function(){return r.cur()}:function(){return C.css(e,t,"")},l=s(),c=n&&n[3]||(C.cssNumber[t]?"":"px"),u=e.nodeType&&(C.cssNumber[t]||"px"!==c&&+l)&&te.exec(C.css(e,t));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;a--;)C.style(e,t,u+c),(1-i)*(1-(i=s()/l||.5))<=0&&(a=0),u/=i;u*=2,C.style(e,t,u+c),n=n||[]}return n&&(u=+u||+l||0,o=n[1]?u+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=u,r.end=o)),o}var ce={};function ue(e,t){for(var n,r,o,i,a,s,l,c=[],u=0,f=e.length;u<f;u++)(r=e[u]).style&&(n=r.style.display,t?("none"===n&&(c[u]=K.get(r,"display")||null,c[u]||(r.style.display="")),""===r.style.display&&se(r)&&(c[u]=(l=a=i=void 0,a=(o=r).ownerDocument,s=o.nodeName,(l=ce[s])||(i=a.body.appendChild(a.createElement(s)),l=C.css(i,"display"),i.parentNode.removeChild(i),"none"===l&&(l="block"),ce[s]=l)))):"none"!==n&&(c[u]="none",K.set(r,"display",n)));for(u=0;u<f;u++)null!=c[u]&&(e[u].style.display=c[u]);return e}C.fn.extend({show:function(){return ue(this,!0)},hide:function(){return ue(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?C(this).show():C(this).hide()})}});var fe=/^(?:checkbox|radio)$/i,de=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,pe=/^$|^module$|\/(?:java|ecma)script/i,he={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ve(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&k(e,t)?C.merge([e],n):n}function ge(e,t){for(var n=0,r=e.length;n<r;n++)K.set(e[n],"globalEval",!t||K.get(t[n],"globalEval"))}he.optgroup=he.option,he.tbody=he.tfoot=he.colgroup=he.caption=he.thead,he.th=he.td;var me,ye,be=/<|&#?\w+;/;function xe(e,t,n,r,o){for(var i,a,s,l,c,u,f=t.createDocumentFragment(),d=[],p=0,h=e.length;p<h;p++)if((i=e[p])||0===i)if("object"===w(i))C.merge(d,i.nodeType?[i]:i);else if(be.test(i)){for(a=a||f.appendChild(t.createElement("div")),s=(de.exec(i)||["",""])[1].toLowerCase(),l=he[s]||he._default,a.innerHTML=l[1]+C.htmlPrefilter(i)+l[2],u=l[0];u--;)a=a.lastChild;C.merge(d,a.childNodes),(a=f.firstChild).textContent=""}else d.push(t.createTextNode(i));for(f.textContent="",p=0;i=d[p++];)if(r&&-1<C.inArray(i,r))o&&o.push(i);else if(c=oe(i),a=ve(f.appendChild(i),"script"),c&&ge(a),n)for(u=0;i=a[u++];)pe.test(i.type||"")&&n.push(i);return f}me=E.createDocumentFragment().appendChild(E.createElement("div")),(ye=E.createElement("input")).setAttribute("type","radio"),ye.setAttribute("checked","checked"),ye.setAttribute("name","t"),me.appendChild(ye),y.checkClone=me.cloneNode(!0).cloneNode(!0).lastChild.checked,me.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!me.cloneNode(!0).lastChild.defaultValue;var we=/^key/,Se=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Te=/^([^.]*)(?:\.(.+)|)/;function Ee(){return!0}function Ce(){return!1}function Le(e,t){return e===function(){try{return E.activeElement}catch(e){}}()==("focus"===t)}function ke(e,t,n,r,o,i){var a,s;if("object"===_typeof(t)){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)ke(e,s,n,r,t[s],i);return e}if(null==r&&null==o?(o=n,r=n=void 0):null==o&&("string"==typeof n?(o=r,r=void 0):(o=r,r=n,n=void 0)),!1===o)o=Ce;else if(!o)return e;return 1===i&&(a=o,(o=function(e){return C().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=C.guid++)),e.each(function(){C.event.add(this,t,o,r,n)})}function Ae(e,o,i){i?(K.set(e,o,!1),C.event.add(e,o,{namespace:!1,handler:function(e){var t,n,r=K.get(this,o);if(1&e.isTrigger&&this[o]){if(r.length)(C.event.special[o]||{}).delegateType&&e.stopPropagation();else if(r=s.call(arguments),K.set(this,o,r),t=i(this,o),this[o](),r!==(n=K.get(this,o))||t?K.set(this,o,!1):n={},r!==n)return e.stopImmediatePropagation(),e.preventDefault(),n.value}else r.length&&(K.set(this,o,{value:C.event.trigger(C.extend(r[0],C.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===K.get(e,o)&&C.event.add(e,o,Ee)}C.event={global:{},add:function(t,e,n,r,o){var i,a,s,l,c,u,f,d,p,h,v,g=K.get(t);if(g)for(n.handler&&(n=(i=n).handler,o=i.selector),o&&C.find.matchesSelector(re,o),n.guid||(n.guid=C.guid++),(l=g.events)||(l=g.events={}),(a=g.handle)||(a=g.handle=function(e){return void 0!==C&&C.event.triggered!==e.type?C.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(H)||[""]).length;c--;)p=v=(s=Te.exec(e[c])||[])[1],h=(s[2]||"").split(".").sort(),p&&(f=C.event.special[p]||{},p=(o?f.delegateType:f.bindType)||p,f=C.event.special[p]||{},u=C.extend({type:p,origType:v,data:r,handler:n,guid:n.guid,selector:o,needsContext:o&&C.expr.match.needsContext.test(o),namespace:h.join(".")},i),(d=l[p])||((d=l[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,h,a)||t.addEventListener&&t.addEventListener(p,a)),f.add&&(f.add.call(t,u),u.handler.guid||(u.handler.guid=n.guid)),o?d.splice(d.delegateCount++,0,u):d.push(u),C.event.global[p]=!0)},remove:function(e,t,n,r,o){var i,a,s,l,c,u,f,d,p,h,v,g=K.hasData(e)&&K.get(e);if(g&&(l=g.events)){for(c=(t=(t||"").match(H)||[""]).length;c--;)if(p=v=(s=Te.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),p){for(f=C.event.special[p]||{},d=l[p=(r?f.delegateType:f.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=i=d.length;i--;)u=d[i],!o&&v!==u.origType||n&&n.guid!==u.guid||s&&!s.test(u.namespace)||r&&r!==u.selector&&("**"!==r||!u.selector)||(d.splice(i,1),u.selector&&d.delegateCount--,f.remove&&f.remove.call(e,u));a&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,h,g.handle)||C.removeEvent(e,p,g.handle),delete l[p])}else for(p in l)C.event.remove(e,p+t[c],n,r,!0);C.isEmptyObject(l)&&K.remove(e,"handle events")}},dispatch:function(e){var t,n,r,o,i,a,s=C.event.fix(e),l=new Array(arguments.length),c=(K.get(this,"events")||{})[s.type]||[],u=C.event.special[s.type]||{};for(l[0]=s,t=1;t<arguments.length;t++)l[t]=arguments[t];if(s.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,s)){for(a=C.event.handlers.call(this,s,c),t=0;(o=a[t++])&&!s.isPropagationStopped();)for(s.currentTarget=o.elem,n=0;(i=o.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!1!==i.namespace&&!s.rnamespace.test(i.namespace)||(s.handleObj=i,s.data=i.data,void 0!==(r=((C.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,l))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,r,o,i,a,s=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&1<=e.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(i=[],a={},n=0;n<l;n++)void 0===a[o=(r=t[n]).selector+" "]&&(a[o]=r.needsContext?-1<C(o,this).index(c):C.find(o,this,null,[c]).length),a[o]&&i.push(r);i.length&&s.push({elem:c,handlers:i})}return c=this,l<t.length&&s.push({elem:c,handlers:t.slice(l)}),s},addProp:function(t,e){Object.defineProperty(C.Event.prototype,t,{enumerable:!0,configurable:!0,get:b(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[C.expando]?e:new C.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return fe.test(t.type)&&t.click&&k(t,"input")&&Ae(t,"click",Ee),!1},trigger:function(e){var t=this||e;return fe.test(t.type)&&t.click&&k(t,"input")&&Ae(t,"click"),!0},_default:function(e){var t=e.target;return fe.test(t.type)&&t.click&&k(t,"input")&&K.get(t,"click")||k(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},C.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},C.Event=function(e,t){if(!(this instanceof C.Event))return new C.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ee:Ce,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&C.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[C.expando]=!0},C.Event.prototype={constructor:C.Event,isDefaultPrevented:Ce,isPropagationStopped:Ce,isImmediatePropagationStopped:Ce,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ee,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ee,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ee,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},C.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&we.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Se.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},C.event.addProp),C.each({focus:"focusin",blur:"focusout"},function(e,t){C.event.special[e]={setup:function(){return Ae(this,e,Le),!1},trigger:function(){return Ae(this,e),!0},delegateType:t}}),C.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,o){C.event.special[e]={delegateType:o,bindType:o,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||C.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=o),t}}}),C.fn.extend({on:function(e,t,n,r){return ke(this,e,t,n,r)},one:function(e,t,n,r){return ke(this,e,t,n,r,1)},off:function(e,t,n){var r,o;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,C(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"!==_typeof(e))return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ce),this.each(function(){C.event.remove(this,e,n,t)});for(o in e)this.off(o,t,e[o]);return this}});var Ne=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,De=/<script|<style|<link/i,je=/checked\s*(?:[^=]|=\s*.checked.)/i,qe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Oe(e,t){return k(e,"table")&&k(11!==t.nodeType?t:t.firstChild,"tr")&&C(e).children("tbody")[0]||e}function Me(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function He(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function _e(e,t){var n,r,o,i,a,s,l,c;if(1===t.nodeType){if(K.hasData(e)&&(i=K.access(e),a=K.set(t,i),c=i.events))for(o in delete a.handle,a.events={},c)for(n=0,r=c[o].length;n<r;n++)C.event.add(t,o,c[o][n]);Q.hasData(e)&&(s=Q.access(e),l=C.extend({},s),Q.set(t,l))}}function Pe(n,r,o,i){r=g.apply([],r);var e,t,a,s,l,c,u=0,f=n.length,d=f-1,p=r[0],h=b(p);if(h||1<f&&"string"==typeof p&&!y.checkClone&&je.test(p))return n.each(function(e){var t=n.eq(e);h&&(r[0]=p.call(this,e,t.html())),Pe(t,r,o,i)});if(f&&(t=(e=xe(r,n[0].ownerDocument,!1,n,i)).firstChild,1===e.childNodes.length&&(e=t),t||i)){for(s=(a=C.map(ve(e,"script"),Me)).length;u<f;u++)l=e,u!==d&&(l=C.clone(l,!0,!0),s&&C.merge(a,ve(l,"script"))),o.call(n[u],l,u);if(s)for(c=a[a.length-1].ownerDocument,C.map(a,He),u=0;u<s;u++)l=a[u],pe.test(l.type||"")&&!K.access(l,"globalEval")&&C.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?C._evalUrl&&!l.noModule&&C._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")}):x(l.textContent.replace(qe,""),l,c))}return n}function Re(e,t,n){for(var r,o=t?C.filter(t,e):e,i=0;null!=(r=o[i]);i++)n||1!==r.nodeType||C.cleanData(ve(r)),r.parentNode&&(n&&oe(r)&&ge(ve(r,"script")),r.parentNode.removeChild(r));return e}C.extend({htmlPrefilter:function(e){return e.replace(Ne,"<$1></$2>")},clone:function(e,t,n){var r,o,i,a,s,l,c,u=e.cloneNode(!0),f=oe(e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||C.isXMLDoc(e)))for(a=ve(u),r=0,o=(i=ve(e)).length;r<o;r++)s=i[r],l=a[r],void 0,"input"===(c=l.nodeName.toLowerCase())&&fe.test(s.type)?l.checked=s.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=s.defaultValue);if(t)if(n)for(i=i||ve(e),a=a||ve(u),r=0,o=i.length;r<o;r++)_e(i[r],a[r]);else _e(e,u);return 0<(a=ve(u,"script")).length&&ge(a,!f&&ve(e,"script")),u},cleanData:function(e){for(var t,n,r,o=C.event.special,i=0;void 0!==(n=e[i]);i++)if(U(n)){if(t=n[K.expando]){if(t.events)for(r in t.events)o[r]?C.event.remove(n,r):C.removeEvent(n,r,t.handle);n[K.expando]=void 0}n[Q.expando]&&(n[Q.expando]=void 0)}}}),C.fn.extend({detach:function(e){return Re(this,e,!0)},remove:function(e){return Re(this,e)},text:function(e){return W(this,function(e){return void 0===e?C.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Pe(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Oe(this,e).appendChild(e)})},prepend:function(){return Pe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Oe(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Pe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Pe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(C.cleanData(ve(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return C.clone(this,e,t)})},html:function(e){return W(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!De.test(e)&&!he[(de.exec(e)||["",""])[1].toLowerCase()]){e=C.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(C.cleanData(ve(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return Pe(this,arguments,function(e){var t=this.parentNode;C.inArray(this,n)<0&&(C.cleanData(ve(this)),t&&t.replaceChild(e,this))},n)}}),C.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,a){C.fn[e]=function(e){for(var t,n=[],r=C(e),o=r.length-1,i=0;i<=o;i++)t=i===o?this:this.clone(!0),C(r[i])[a](t),l.apply(n,t.get());return this.pushStack(n)}});var Ie,Be,Fe,We,$e,ze,Ve,Xe=new RegExp("^("+ee+")(?!px)[a-z%]+$","i"),Ue=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=T),t.getComputedStyle(e)},Ye=new RegExp(ne.join("|"),"i");function Ke(){if(Ve){ze.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Ve.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",re.appendChild(ze).appendChild(Ve);var e=T.getComputedStyle(Ve);Ie="1%"!==e.top,$e=12===Qe(e.marginLeft),Ve.style.right="60%",We=36===Qe(e.right),Be=36===Qe(e.width),Ve.style.position="absolute",Fe=12===Qe(Ve.offsetWidth/3),re.removeChild(ze),Ve=null}}function Qe(e){return Math.round(parseFloat(e))}function Ge(e,t,n){var r,o,i,a,s=e.style;return(n=n||Ue(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||oe(e)||(a=C.style(e,t)),!y.pixelBoxStyles()&&Xe.test(a)&&Ye.test(t)&&(r=s.width,o=s.minWidth,i=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=o,s.maxWidth=i)),void 0!==a?a+"":a}function Je(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}ze=E.createElement("div"),(Ve=E.createElement("div")).style&&(Ve.style.backgroundClip="content-box",Ve.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===Ve.style.backgroundClip,C.extend(y,{boxSizingReliable:function(){return Ke(),Be},pixelBoxStyles:function(){return Ke(),We},pixelPosition:function(){return Ke(),Ie},reliableMarginLeft:function(){return Ke(),$e},scrollboxSize:function(){return Ke(),Fe}}));var Ze=["Webkit","Moz","ms"],et=E.createElement("div").style,tt={};function nt(e){var t=C.cssProps[e]||tt[e];return t||(e in et?e:tt[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ze.length;n--;)if((e=Ze[n]+t)in et)return e}(e)||e)}var rt=/^(none|table(?!-c[ea]).+)/,ot=/^--/,it={position:"absolute",visibility:"hidden",display:"block"},at={letterSpacing:"0",fontWeight:"400"};function st(e,t,n){var r=te.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function lt(e,t,n,r,o,i){var a="width"===t?1:0,s=0,l=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=C.css(e,n+ne[a],!0,o)),r?("content"===n&&(l-=C.css(e,"padding"+ne[a],!0,o)),"margin"!==n&&(l-=C.css(e,"border"+ne[a]+"Width",!0,o))):(l+=C.css(e,"padding"+ne[a],!0,o),"padding"!==n?l+=C.css(e,"border"+ne[a]+"Width",!0,o):s+=C.css(e,"border"+ne[a]+"Width",!0,o));return!r&&0<=i&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-l-s-.5))||0),l}function ct(e,t,n){var r=Ue(e),o=(!y.boxSizingReliable()||n)&&"border-box"===C.css(e,"boxSizing",!1,r),i=o,a=Ge(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(Xe.test(a)){if(!n)return a;a="auto"}return(!y.boxSizingReliable()&&o||"auto"===a||!parseFloat(a)&&"inline"===C.css(e,"display",!1,r))&&e.getClientRects().length&&(o="border-box"===C.css(e,"boxSizing",!1,r),(i=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+lt(e,t,n||(o?"border":"content"),i,r,a)+"px"}function ut(e,t,n,r,o){return new ut.prototype.init(e,t,n,r,o)}C.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ge(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,i,a,s=X(t),l=ot.test(t),c=e.style;if(l||(t=nt(s)),a=C.cssHooks[t]||C.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(o=a.get(e,!1,r))?o:c[t];"string"===(i=_typeof(n))&&(o=te.exec(n))&&o[1]&&(n=le(e,t,o),i="number"),null!=n&&n==n&&("number"!==i||l||(n+=o&&o[3]||(C.cssNumber[s]?"":"px")),y.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,r){var o,i,a,s=X(t);return ot.test(t)||(t=nt(s)),(a=C.cssHooks[t]||C.cssHooks[s])&&"get"in a&&(o=a.get(e,!0,n)),void 0===o&&(o=Ge(e,t,r)),"normal"===o&&t in at&&(o=at[t]),""===n||n?(i=parseFloat(o),!0===n||isFinite(i)?i||0:o):o}}),C.each(["height","width"],function(e,l){C.cssHooks[l]={get:function(e,t,n){if(t)return!rt.test(C.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ct(e,l,n):ae(e,it,function(){return ct(e,l,n)})},set:function(e,t,n){var r,o=Ue(e),i=!y.scrollboxSize()&&"absolute"===o.position,a=(i||n)&&"border-box"===C.css(e,"boxSizing",!1,o),s=n?lt(e,l,n,a,o):0;return a&&i&&(s-=Math.ceil(e["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(o[l])-lt(e,l,"border",!1,o)-.5)),s&&(r=te.exec(t))&&"px"!==(r[3]||"px")&&(e.style[l]=t,t=C.css(e,l)),st(0,t,s)}}}),C.cssHooks.marginLeft=Je(y.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ge(e,"marginLeft"))||e.getBoundingClientRect().left-ae(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),C.each({margin:"",padding:"",border:"Width"},function(o,i){C.cssHooks[o+i]={expand:function(e){for(var t=0,n={},r="string"==typeof e?e.split(" "):[e];t<4;t++)n[o+ne[t]+i]=r[t]||r[t-2]||r[0];return n}},"margin"!==o&&(C.cssHooks[o+i].set=st)}),C.fn.extend({css:function(e,t){return W(this,function(e,t,n){var r,o,i={},a=0;if(Array.isArray(t)){for(r=Ue(e),o=t.length;a<o;a++)i[t[a]]=C.css(e,t[a],!1,r);return i}return void 0!==n?C.style(e,t,n):C.css(e,t)},e,t,1<arguments.length)}}),((C.Tween=ut).prototype={constructor:ut,init:function(e,t,n,r,o,i){this.elem=e,this.prop=n,this.easing=o||C.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(C.cssNumber[n]?"":"px")},cur:function(){var e=ut.propHooks[this.prop];return e&&e.get?e.get(this):ut.propHooks._default.get(this)},run:function(e){var t,n=ut.propHooks[this.prop];return this.options.duration?this.pos=t=C.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ut.propHooks._default.set(this),this}}).init.prototype=ut.prototype,(ut.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=C.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){C.fx.step[e.prop]?C.fx.step[e.prop](e):1!==e.elem.nodeType||!C.cssHooks[e.prop]&&null==e.elem.style[nt(e.prop)]?e.elem[e.prop]=e.now:C.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=ut.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},C.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},C.fx=ut.prototype.init,C.fx.step={};var ft,dt,pt,ht,vt=/^(?:toggle|show|hide)$/,gt=/queueHooks$/;function mt(){dt&&(!1===E.hidden&&T.requestAnimationFrame?T.requestAnimationFrame(mt):T.setTimeout(mt,C.fx.interval),C.fx.tick())}function yt(){return T.setTimeout(function(){ft=void 0}),ft=Date.now()}function bt(e,t){var n,r=0,o={height:e};for(t=t?1:0;r<4;r+=2-t)o["margin"+(n=ne[r])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function xt(e,t,n){for(var r,o=(wt.tweeners[t]||[]).concat(wt.tweeners["*"]),i=0,a=o.length;i<a;i++)if(r=o[i].call(n,t,e))return r}function wt(i,e,t){var n,a,r=0,o=wt.prefilters.length,s=C.Deferred().always(function(){delete l.elem}),l=function(){if(a)return!1;for(var e=ft||yt(),t=Math.max(0,c.startTime+c.duration-e),n=1-(t/c.duration||0),r=0,o=c.tweens.length;r<o;r++)c.tweens[r].run(n);return s.notifyWith(i,[c,n,t]),n<1&&o?t:(o||s.notifyWith(i,[c,1,0]),s.resolveWith(i,[c]),!1)},c=s.promise({elem:i,props:C.extend({},e),opts:C.extend(!0,{specialEasing:{},easing:C.easing._default},t),originalProperties:e,originalOptions:t,startTime:ft||yt(),duration:t.duration,tweens:[],createTween:function(e,t){var n=C.Tween(i,c.opts,e,t,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(n),n},stop:function(e){var t=0,n=e?c.tweens.length:0;if(a)return this;for(a=!0;t<n;t++)c.tweens[t].run(1);return e?(s.notifyWith(i,[c,1,0]),s.resolveWith(i,[c,e])):s.rejectWith(i,[c,e]),this}}),u=c.props;for(!function(e,t){var n,r,o,i,a;for(n in e)if(o=t[r=X(n)],i=e[n],Array.isArray(i)&&(o=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(a=C.cssHooks[r])&&"expand"in a)for(n in i=a.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=o);else t[r]=o}(u,c.opts.specialEasing);r<o;r++)if(n=wt.prefilters[r].call(c,i,u,c.opts))return b(n.stop)&&(C._queueHooks(c.elem,c.opts.queue).stop=n.stop.bind(n)),n;return C.map(u,xt,c),b(c.opts.start)&&c.opts.start.call(i,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),C.fx.timer(C.extend(l,{elem:i,anim:c,queue:c.opts.queue})),c}C.Animation=C.extend(wt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return le(n.elem,e,te.exec(t),n),n}]},tweener:function(e,t){for(var n,r=0,o=(e=b(e)?(t=e,["*"]):e.match(H)).length;r<o;r++)n=e[r],wt.tweeners[n]=wt.tweeners[n]||[],wt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,o,i,a,s,l,c,u,f="width"in t||"height"in t,d=this,p={},h=e.style,v=e.nodeType&&se(e),g=K.get(e,"fxshow");for(r in n.queue||(null==(a=C._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,d.always(function(){d.always(function(){a.unqueued--,C.queue(e,"fx").length||a.empty.fire()})})),t)if(o=t[r],vt.test(o)){if(delete t[r],i=i||"toggle"===o,o===(v?"hide":"show")){if("show"!==o||!g||void 0===g[r])continue;v=!0}p[r]=g&&g[r]||C.style(e,r)}if((l=!C.isEmptyObject(t))||!C.isEmptyObject(p))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=g&&g.display)&&(c=K.get(e,"display")),"none"===(u=C.css(e,"display"))&&(c?u=c:(ue([e],!0),c=e.style.display||c,u=C.css(e,"display"),ue([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===C.css(e,"float")&&(l||(d.done(function(){h.display=c}),null==c&&(u=h.display,c="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),l=!1,p)l||(g?"hidden"in g&&(v=g.hidden):g=K.access(e,"fxshow",{display:c}),i&&(g.hidden=!v),v&&ue([e],!0),d.done(function(){for(r in v||ue([e]),K.remove(e,"fxshow"),p)C.style(e,r,p[r])})),l=xt(v?g[r]:0,r,d),r in g||(g[r]=l.start,v&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?wt.prefilters.unshift(e):wt.prefilters.push(e)}}),C.speed=function(e,t,n){var r=e&&"object"===_typeof(e)?C.extend({},e):{complete:n||!n&&t||b(e)&&e,duration:e,easing:n&&t||t&&!b(t)&&t};return C.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in C.fx.speeds?r.duration=C.fx.speeds[r.duration]:r.duration=C.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){b(r.old)&&r.old.call(this),r.queue&&C.dequeue(this,r.queue)},r},C.fn.extend({fadeTo:function(e,t,n,r){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(t,e,n,r){function o(){var e=wt(this,C.extend({},t),a);(i||K.get(this,"finish"))&&e.stop(!0)}var i=C.isEmptyObject(t),a=C.speed(e,n,r);return o.finish=o,i||!1===a.queue?this.each(o):this.queue(a.queue,o)},stop:function(o,e,i){function a(e){var t=e.stop;delete e.stop,t(i)}return"string"!=typeof o&&(i=e,e=o,o=void 0),e&&!1!==o&&this.queue(o||"fx",[]),this.each(function(){var e=!0,t=null!=o&&o+"queueHooks",n=C.timers,r=K.get(this);if(t)r[t]&&r[t].stop&&a(r[t]);else for(t in r)r[t]&&r[t].stop&&gt.test(t)&&a(r[t]);for(t=n.length;t--;)n[t].elem!==this||null!=o&&n[t].queue!==o||(n[t].anim.stop(i),e=!1,n.splice(t,1));!e&&i||C.dequeue(this,o)})},finish:function(a){return!1!==a&&(a=a||"fx"),this.each(function(){var e,t=K.get(this),n=t[a+"queue"],r=t[a+"queueHooks"],o=C.timers,i=n?n.length:0;for(t.finish=!0,C.queue(this,a,[]),r&&r.stop&&r.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===a&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<i;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),C.each(["toggle","show","hide"],function(e,r){var o=C.fn[r];C.fn[r]=function(e,t,n){return null==e||"boolean"==typeof e?o.apply(this,arguments):this.animate(bt(r,!0),e,t,n)}}),C.each({slideDown:bt("show"),slideUp:bt("hide"),slideToggle:bt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,r){C.fn[e]=function(e,t,n){return this.animate(r,e,t,n)}}),C.timers=[],C.fx.tick=function(){var e,t=0,n=C.timers;for(ft=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||C.fx.stop(),ft=void 0},C.fx.timer=function(e){C.timers.push(e),C.fx.start()},C.fx.interval=13,C.fx.start=function(){dt||(dt=!0,mt())},C.fx.stop=function(){dt=null},C.fx.speeds={slow:600,fast:200,_default:400},C.fn.delay=function(r,e){return r=C.fx&&C.fx.speeds[r]||r,e=e||"fx",this.queue(e,function(e,t){var n=T.setTimeout(e,r);t.stop=function(){T.clearTimeout(n)}})},pt=E.createElement("input"),ht=E.createElement("select").appendChild(E.createElement("option")),pt.type="checkbox",y.checkOn=""!==pt.value,y.optSelected=ht.selected,(pt=E.createElement("input")).value="t",pt.type="radio",y.radioValue="t"===pt.value;var St,Tt=C.expr.attrHandle;C.fn.extend({attr:function(e,t){return W(this,C.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){C.removeAttr(this,e)})}}),C.extend({attr:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?C.prop(e,t,n):(1===i&&C.isXMLDoc(e)||(o=C.attrHooks[t.toLowerCase()]||(C.expr.match.bool.test(t)?St:void 0)),void 0!==n?null===n?void C.removeAttr(e,t):o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(r=o.get(e,t))?r:null==(r=C.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&k(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,o=t&&t.match(H);if(o&&1===e.nodeType)for(;n=o[r++];)e.removeAttribute(n)}}),St={set:function(e,t,n){return!1===t?C.removeAttr(e,n):e.setAttribute(n,n),n}},C.each(C.expr.match.bool.source.match(/\w+/g),function(e,t){var a=Tt[t]||C.find.attr;Tt[t]=function(e,t,n){var r,o,i=t.toLowerCase();return n||(o=Tt[i],Tt[i]=r,r=null!=a(e,t,n)?i:null,Tt[i]=o),r}});var Et=/^(?:input|select|textarea|button)$/i,Ct=/^(?:a|area)$/i;function Lt(e){return(e.match(H)||[]).join(" ")}function kt(e){return e.getAttribute&&e.getAttribute("class")||""}function At(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(H)||[]}C.fn.extend({prop:function(e,t){return W(this,C.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[C.propFix[e]||e]})}}),C.extend({prop:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&C.isXMLDoc(e)||(t=C.propFix[t]||t,o=C.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:e[t]=n:o&&"get"in o&&null!==(r=o.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=C.find.attr(e,"tabindex");return t?parseInt(t,10):Et.test(e.nodeName)||Ct.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(C.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),C.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){C.propFix[this.toLowerCase()]=this}),C.fn.extend({addClass:function(t){var e,n,r,o,i,a,s,l=0;if(b(t))return this.each(function(e){C(this).addClass(t.call(this,e,kt(this)))});if((e=At(t)).length)for(;n=this[l++];)if(o=kt(n),r=1===n.nodeType&&" "+Lt(o)+" "){for(a=0;i=e[a++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");o!==(s=Lt(r))&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,r,o,i,a,s,l=0;if(b(t))return this.each(function(e){C(this).removeClass(t.call(this,e,kt(this)))});if(!arguments.length)return this.attr("class","");if((e=At(t)).length)for(;n=this[l++];)if(o=kt(n),r=1===n.nodeType&&" "+Lt(o)+" "){for(a=0;i=e[a++];)for(;-1<r.indexOf(" "+i+" ");)r=r.replace(" "+i+" "," ");o!==(s=Lt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(o,t){var i=_typeof(o),a="string"===i||Array.isArray(o);return"boolean"==typeof t&&a?t?this.addClass(o):this.removeClass(o):b(o)?this.each(function(e){C(this).toggleClass(o.call(this,e,kt(this),t),t)}):this.each(function(){var e,t,n,r;if(a)for(t=0,n=C(this),r=At(o);e=r[t++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==o&&"boolean"!==i||((e=kt(this))&&K.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===o?"":K.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&-1<(" "+Lt(kt(n))+" ").indexOf(t))return!0;return!1}});var Nt=/\r/g;C.fn.extend({val:function(n){var r,e,o,t=this[0];return arguments.length?(o=b(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=o?n.call(this,e,C(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=C.map(t,function(e){return null==e?"":e+""})),(r=C.valHooks[this.type]||C.valHooks[this.nodeName.toLowerCase()])&&"set"in r&&void 0!==r.set(this,t,"value")||(this.value=t))})):t?(r=C.valHooks[t.type]||C.valHooks[t.nodeName.toLowerCase()])&&"get"in r&&void 0!==(e=r.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(Nt,""):null==e?"":e:void 0}}),C.extend({valHooks:{option:{get:function(e){var t=C.find.attr(e,"value");return null!=t?t:Lt(C.text(e))}},select:{get:function(e){var t,n,r,o=e.options,i=e.selectedIndex,a="select-one"===e.type,s=a?null:[],l=a?i+1:o.length;for(r=i<0?l:a?i:0;r<l;r++)if(((n=o[r]).selected||r===i)&&!n.disabled&&(!n.parentNode.disabled||!k(n.parentNode,"optgroup"))){if(t=C(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,r,o=e.options,i=C.makeArray(t),a=o.length;a--;)((r=o[a]).selected=-1<C.inArray(C.valHooks.option.get(r),i))&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),C.each(["radio","checkbox"],function(){C.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<C.inArray(C(e).val(),t)}},y.checkOn||(C.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),y.focusin="onfocusin"in T;function Dt(e){e.stopPropagation()}var jt=/^(?:focusinfocus|focusoutblur)$/;C.extend(C.event,{trigger:function(e,t,n,r){var o,i,a,s,l,c,u,f,d=[n||E],p=m.call(e,"type")?e.type:e,h=m.call(e,"namespace")?e.namespace.split("."):[];if(i=f=a=n=n||E,3!==n.nodeType&&8!==n.nodeType&&!jt.test(p+C.event.triggered)&&(-1<p.indexOf(".")&&(p=(h=p.split(".")).shift(),h.sort()),l=p.indexOf(":")<0&&"on"+p,(e=e[C.expando]?e:new C.Event(p,"object"===_typeof(e)&&e)).isTrigger=r?2:3,e.namespace=h.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:C.makeArray(t,[e]),u=C.event.special[p]||{},r||!u.trigger||!1!==u.trigger.apply(n,t))){if(!r&&!u.noBubble&&!v(n)){for(s=u.delegateType||p,jt.test(s+p)||(i=i.parentNode);i;i=i.parentNode)d.push(i),a=i;a===(n.ownerDocument||E)&&d.push(a.defaultView||a.parentWindow||T)}for(o=0;(i=d[o++])&&!e.isPropagationStopped();)f=i,e.type=1<o?s:u.bindType||p,(c=(K.get(i,"events")||{})[e.type]&&K.get(i,"handle"))&&c.apply(i,t),(c=l&&i[l])&&c.apply&&U(i)&&(e.result=c.apply(i,t),!1===e.result&&e.preventDefault());return e.type=p,r||e.isDefaultPrevented()||u._default&&!1!==u._default.apply(d.pop(),t)||!U(n)||l&&b(n[p])&&!v(n)&&((a=n[l])&&(n[l]=null),C.event.triggered=p,e.isPropagationStopped()&&f.addEventListener(p,Dt),n[p](),e.isPropagationStopped()&&f.removeEventListener(p,Dt),C.event.triggered=void 0,a&&(n[l]=a)),e.result}},simulate:function(e,t,n){var r=C.extend(new C.Event,n,{type:e,isSimulated:!0});C.event.trigger(r,null,t)}}),C.fn.extend({trigger:function(e,t){return this.each(function(){C.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return C.event.trigger(e,t,n,!0)}}),y.focusin||C.each({focus:"focusin",blur:"focusout"},function(n,r){function o(e){C.event.simulate(r,e.target,C.event.fix(e))}C.event.special[r]={setup:function(){var e=this.ownerDocument||this,t=K.access(e,r);t||e.addEventListener(n,o,!0),K.access(e,r,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this,t=K.access(e,r)-1;t?K.access(e,r,t):(e.removeEventListener(n,o,!0),K.remove(e,r))}}});var qt=T.location,Ot=Date.now(),Mt=/\?/;C.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new T.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||C.error("Invalid XML: "+e),t};var Ht=/\[\]$/,_t=/\r?\n/g,Pt=/^(?:submit|button|image|reset|file)$/i,Rt=/^(?:input|select|textarea|keygen)/i;function It(n,e,r,o){var t;if(Array.isArray(e))C.each(e,function(e,t){r||Ht.test(n)?o(n,t):It(n+"["+("object"===_typeof(t)&&null!=t?e:"")+"]",t,r,o)});else if(r||"object"!==w(e))o(n,e);else for(t in e)It(n+"["+t+"]",e[t],r,o)}C.param=function(e,t){function n(e,t){var n=b(t)?t():t;o[o.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)}var r,o=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!C.isPlainObject(e))C.each(e,function(){n(this.name,this.value)});else for(r in e)It(r,e[r],t,n);return o.join("&")},C.fn.extend({serialize:function(){return C.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=C.prop(this,"elements");return e?C.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!C(this).is(":disabled")&&Rt.test(this.nodeName)&&!Pt.test(e)&&(this.checked||!fe.test(e))}).map(function(e,t){var n=C(this).val();return null==n?null:Array.isArray(n)?C.map(n,function(e){return{name:t.name,value:e.replace(_t,"\r\n")}}):{name:t.name,value:n.replace(_t,"\r\n")}}).get()}});var Bt=/%20/g,Ft=/#.*$/,Wt=/([?&])_=[^&]*/,$t=/^(.*?):[ \t]*([^\r\n]*)$/gm,zt=/^(?:GET|HEAD)$/,Vt=/^\/\//,Xt={},Ut={},Yt="*/".concat("*"),Kt=E.createElement("a");function Qt(i){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,r=0,o=e.toLowerCase().match(H)||[];if(b(t))for(;n=o[r++];)"+"===n[0]?(n=n.slice(1)||"*",(i[n]=i[n]||[]).unshift(t)):(i[n]=i[n]||[]).push(t)}}function Gt(t,o,i,a){var s={},l=t===Ut;function c(e){var r;return s[e]=!0,C.each(t[e]||[],function(e,t){var n=t(o,i,a);return"string"!=typeof n||l||s[n]?l?!(r=n):void 0:(o.dataTypes.unshift(n),c(n),!1)}),r}return c(o.dataTypes[0])||!s["*"]&&c("*")}function Jt(e,t){var n,r,o=C.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:r=r||{})[n]=t[n]);return r&&C.extend(!0,e,r),e}Kt.href=qt.href,C.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:qt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(qt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Yt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":C.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Jt(Jt(e,C.ajaxSettings),t):Jt(C.ajaxSettings,e)},ajaxPrefilter:Qt(Xt),ajaxTransport:Qt(Ut),ajax:function(e,t){"object"===_typeof(e)&&(t=e,e=void 0),t=t||{};var u,f,d,n,p,r,h,v,o,i,g=C.ajaxSetup({},t),m=g.context||g,y=g.context&&(m.nodeType||m.jquery)?C(m):C.event,b=C.Deferred(),x=C.Callbacks("once memory"),w=g.statusCode||{},a={},s={},l="canceled",S={readyState:0,getResponseHeader:function(e){var t;if(h){if(!n)for(n={};t=$t.exec(d);)n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return h?d:null},setRequestHeader:function(e,t){return null==h&&(e=s[e.toLowerCase()]=s[e.toLowerCase()]||e,a[e]=t),this},overrideMimeType:function(e){return null==h&&(g.mimeType=e),this},statusCode:function(e){var t;if(e)if(h)S.always(e[S.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||l;return u&&u.abort(t),c(0,t),this}};if(b.promise(S),g.url=((e||g.url||qt.href)+"").replace(Vt,qt.protocol+"//"),g.type=t.method||t.type||g.method||g.type,g.dataTypes=(g.dataType||"*").toLowerCase().match(H)||[""],null==g.crossDomain){r=E.createElement("a");try{r.href=g.url,r.href=r.href,g.crossDomain=Kt.protocol+"//"+Kt.host!=r.protocol+"//"+r.host}catch(e){g.crossDomain=!0}}if(g.data&&g.processData&&"string"!=typeof g.data&&(g.data=C.param(g.data,g.traditional)),Gt(Xt,g,t,S),h)return S;for(o in(v=C.event&&g.global)&&0==C.active++&&C.event.trigger("ajaxStart"),g.type=g.type.toUpperCase(),g.hasContent=!zt.test(g.type),f=g.url.replace(Ft,""),g.hasContent?g.data&&g.processData&&0===(g.contentType||"").indexOf("application/x-www-form-urlencoded")&&(g.data=g.data.replace(Bt,"+")):(i=g.url.slice(f.length),g.data&&(g.processData||"string"==typeof g.data)&&(f+=(Mt.test(f)?"&":"?")+g.data,delete g.data),!1===g.cache&&(f=f.replace(Wt,"$1"),i=(Mt.test(f)?"&":"?")+"_="+Ot+++i),g.url=f+i),g.ifModified&&(C.lastModified[f]&&S.setRequestHeader("If-Modified-Since",C.lastModified[f]),C.etag[f]&&S.setRequestHeader("If-None-Match",C.etag[f])),(g.data&&g.hasContent&&!1!==g.contentType||t.contentType)&&S.setRequestHeader("Content-Type",g.contentType),S.setRequestHeader("Accept",g.dataTypes[0]&&g.accepts[g.dataTypes[0]]?g.accepts[g.dataTypes[0]]+("*"!==g.dataTypes[0]?", "+Yt+"; q=0.01":""):g.accepts["*"]),g.headers)S.setRequestHeader(o,g.headers[o]);if(g.beforeSend&&(!1===g.beforeSend.call(m,S,g)||h))return S.abort();if(l="abort",x.add(g.complete),S.done(g.success),S.fail(g.error),u=Gt(Ut,g,t,S)){if(S.readyState=1,v&&y.trigger("ajaxSend",[S,g]),h)return S;g.async&&0<g.timeout&&(p=T.setTimeout(function(){S.abort("timeout")},g.timeout));try{h=!1,u.send(a,c)}catch(e){if(h)throw e;c(-1,e)}}else c(-1,"No Transport");function c(e,t,n,r){var o,i,a,s,l,c=t;h||(h=!0,p&&T.clearTimeout(p),u=void 0,d=r||"",S.readyState=0<e?4:0,o=200<=e&&e<300||304===e,n&&(s=function(e,t,n){for(var r,o,i,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(o in s)if(s[o]&&s[o].test(r)){l.unshift(o);break}if(l[0]in n)i=l[0];else{for(o in n){if(!l[0]||e.converters[o+" "+l[0]]){i=o;break}a=a||o}i=i||a}if(i)return i!==l[0]&&l.unshift(i),n[i]}(g,S,n)),s=function(e,t,n,r){var o,i,a,s,l,c={},u=e.dataTypes.slice();if(u[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(i=u.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=i,i=u.shift())if("*"===i)i=l;else if("*"!==l&&l!==i){if(!(a=c[l+" "+i]||c["* "+i]))for(o in c)if((s=o.split(" "))[1]===i&&(a=c[l+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[o]:!0!==c[o]&&(i=s[0],u.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+i}}}return{state:"success",data:t}}(g,s,S,o),o?(g.ifModified&&((l=S.getResponseHeader("Last-Modified"))&&(C.lastModified[f]=l),(l=S.getResponseHeader("etag"))&&(C.etag[f]=l)),204===e||"HEAD"===g.type?c="nocontent":304===e?c="notmodified":(c=s.state,i=s.data,o=!(a=s.error))):(a=c,!e&&c||(c="error",e<0&&(e=0))),S.status=e,S.statusText=(t||c)+"",o?b.resolveWith(m,[i,c,S]):b.rejectWith(m,[S,c,a]),S.statusCode(w),w=void 0,v&&y.trigger(o?"ajaxSuccess":"ajaxError",[S,g,o?i:a]),x.fireWith(m,[S,c]),v&&(y.trigger("ajaxComplete",[S,g]),--C.active||C.event.trigger("ajaxStop")))}return S},getJSON:function(e,t,n){return C.get(e,t,n,"json")},getScript:function(e,t){return C.get(e,void 0,t,"script")}}),C.each(["get","post"],function(e,o){C[o]=function(e,t,n,r){return b(t)&&(r=r||n,n=t,t=void 0),C.ajax(C.extend({url:e,type:o,dataType:r,data:t,success:n},C.isPlainObject(e)&&e))}}),C._evalUrl=function(e,t){return C.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){C.globalEval(e,t)}})},C.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=C(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return b(n)?this.each(function(e){C(this).wrapInner(n.call(this,e))}):this.each(function(){var e=C(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=b(t);return this.each(function(e){C(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){C(this).replaceWith(this.childNodes)}),this}}),C.expr.pseudos.hidden=function(e){return!C.expr.pseudos.visible(e)},C.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},C.ajaxSettings.xhr=function(){try{return new T.XMLHttpRequest}catch(e){}};var Zt={0:200,1223:204},en=C.ajaxSettings.xhr();y.cors=!!en&&"withCredentials"in en,y.ajax=en=!!en,C.ajaxTransport(function(o){var i,a;if(y.cors||en&&!o.crossDomain)return{send:function(e,t){var n,r=o.xhr();if(r.open(o.type,o.url,o.async,o.username,o.password),o.xhrFields)for(n in o.xhrFields)r[n]=o.xhrFields[n];for(n in o.mimeType&&r.overrideMimeType&&r.overrideMimeType(o.mimeType),o.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)r.setRequestHeader(n,e[n]);i=function(e){return function(){i&&(i=a=r.onload=r.onerror=r.onabort=r.ontimeout=r.onreadystatechange=null,"abort"===e?r.abort():"error"===e?"number"!=typeof r.status?t(0,"error"):t(r.status,r.statusText):t(Zt[r.status]||r.status,r.statusText,"text"!==(r.responseType||"text")||"string"!=typeof r.responseText?{binary:r.response}:{text:r.responseText},r.getAllResponseHeaders()))}},r.onload=i(),a=r.onerror=r.ontimeout=i("error"),void 0!==r.onabort?r.onabort=a:r.onreadystatechange=function(){4===r.readyState&&T.setTimeout(function(){i&&a()})},i=i("abort");try{r.send(o.hasContent&&o.data||null)}catch(e){if(i)throw e}},abort:function(){i&&i()}}}),C.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),C.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return C.globalEval(e),e}}}),C.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),C.ajaxTransport("script",function(n){var r,o;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){r=C("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",o=function(e){r.remove(),o=null,e&&t("error"===e.type?404:200,e.type)}),E.head.appendChild(r[0])},abort:function(){o&&o()}}});var tn,nn=[],rn=/(=)\?(?=&|$)|\?\?/;C.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=nn.pop()||C.expando+"_"+Ot++;return this[e]=!0,e}}),C.ajaxPrefilter("json jsonp",function(e,t,n){var r,o,i,a=!1!==e.jsonp&&(rn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&rn.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=b(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(rn,"$1"+r):!1!==e.jsonp&&(e.url+=(Mt.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return i||C.error(r+" was not called"),i[0]},e.dataTypes[0]="json",o=T[r],T[r]=function(){i=arguments},n.always(function(){void 0===o?C(T).removeProp(r):T[r]=o,e[r]&&(e.jsonpCallback=t.jsonpCallback,nn.push(r)),i&&b(o)&&o(i[0]),i=o=void 0}),"script"}),y.createHTMLDocument=((tn=E.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===tn.childNodes.length),C.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(y.createHTMLDocument?((r=(t=E.implementation.createHTMLDocument("")).createElement("base")).href=E.location.href,t.head.appendChild(r)):t=E),i=!n&&[],(o=A.exec(e))?[t.createElement(o[1])]:(o=xe([e],t,i),i&&i.length&&C(i).remove(),C.merge([],o.childNodes)));var r,o,i},C.fn.load=function(e,t,n){var r,o,i,a=this,s=e.indexOf(" ");return-1<s&&(r=Lt(e.slice(s)),e=e.slice(0,s)),b(t)?(n=t,t=void 0):t&&"object"===_typeof(t)&&(o="POST"),0<a.length&&C.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){i=arguments,a.html(r?C("<div>").append(C.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,i||[e.responseText,t,e])})}),this},C.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){C.fn[t]=function(e){return this.on(t,e)}}),C.expr.pseudos.animated=function(t){return C.grep(C.timers,function(e){return t===e.elem}).length},C.offset={setOffset:function(e,t,n){var r,o,i,a,s,l,c=C.css(e,"position"),u=C(e),f={};"static"===c&&(e.style.position="relative"),s=u.offset(),i=C.css(e,"top"),l=C.css(e,"left"),o=("absolute"===c||"fixed"===c)&&-1<(i+l).indexOf("auto")?(a=(r=u.position()).top,r.left):(a=parseFloat(i)||0,parseFloat(l)||0),b(t)&&(t=t.call(e,n,C.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+o),"using"in t?t.using.call(e,f):u.css(f)}},C.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){C.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],o={top:0,left:0};if("fixed"===C.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===C.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((o=C(e).offset()).top+=C.css(e,"borderTopWidth",!0),o.left+=C.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-C.css(r,"marginTop",!0),left:t.left-o.left-C.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===C.css(e,"position");)e=e.offsetParent;return e||re})}}),C.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,o){var i="pageYOffset"===o;C.fn[t]=function(e){return W(this,function(e,t,n){var r;if(v(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n)return r?r[o]:e[t];r?r.scrollTo(i?r.pageXOffset:n,i?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),C.each(["top","left"],function(e,n){C.cssHooks[n]=Je(y.pixelPosition,function(e,t){if(t)return t=Ge(e,n),Xe.test(t)?C(e).position()[n]+"px":t})}),C.each({Height:"height",Width:"width"},function(a,s){C.each({padding:"inner"+a,content:s,"":"outer"+a},function(r,i){C.fn[i]=function(e,t){var n=arguments.length&&(r||"boolean"!=typeof e),o=r||(!0===e||!0===t?"margin":"border");return W(this,function(e,t,n){var r;return v(e)?0===i.indexOf("outer")?e["inner"+a]:e.document.documentElement["client"+a]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+a],r["scroll"+a],e.body["offset"+a],r["offset"+a],r["client"+a])):void 0===n?C.css(e,t,o):C.style(e,t,n,o)},s,n?e:void 0,n)}})}),C.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){C.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}}),C.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),C.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),C.proxy=function(e,t){var n,r,o;if("string"==typeof t&&(n=e[t],t=e,e=n),b(e))return r=s.call(arguments,2),(o=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||C.guid++,o},C.holdReady=function(e){e?C.readyWait++:C.ready(!0)},C.isArray=Array.isArray,C.parseJSON=JSON.parse,C.nodeName=k,C.isFunction=b,C.isWindow=v,C.camelCase=X,C.type=w,C.now=Date.now,C.isNumeric=function(e){var t=C.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return C});var on=T.jQuery,an=T.$;return C.noConflict=function(e){return T.$===C&&(T.$=an),e&&T.jQuery===C&&(T.jQuery=on),C},e||(T.jQuery=T.$=C),C}),document.addEventListener("DOMContentLoaded",function(e){ymaps.ready(function(){var e,t=new ymaps.Map("map",{center:[54.181465,45.187582],zoom:16,height:"100%",scroll:!1},{searchControlProvider:"yandex#search"}),n=ymaps.templateLayoutFactory.createClass('<div style="color: #FFFFFF; font-weight: bold;">11$[properties.iconContent]</div>'),r=new ymaps.Placemark(t.getCenter(),{hintContent:"Cho cco ...",balloonContentHeader:"Cho cco ...",balloonContentBody:"Самые вкусные шоколадные батончики - быстро, вкусно, сытно, ждем по адресу:",balloonContentFooter:"Саранск ..."},{iconLayout:"default#image",iconImageHref:"./img/map-icon.png",iconImageSize:[46,57],iconImageOffset:[-5,-38]}),o=new ymaps.Placemark([54.181349,45.181572],{hintContent:"Собственный значок метки с контентом",balloonContent:"Меточка на соборе ушакова",balloonContentBody:"Самые вкусные шоколадные батончики - быстро, вкусно, сытно, ждем по адресу:",balloonContentFooter:"Саранск ..."},(_defineProperty(e={iconLayout:"default#imageWithContent",iconImageHref:"./img/map-icon.png",iconImageSize:[48,48]},"iconImageSize",[46,57]),_defineProperty(e,"iconImageOffset",[-5,-38]),_defineProperty(e,"iconContentLayout",n),e));t.geoObjects.add(r).add(o)})}),document.addEventListener("DOMContentLoaded",function(e){var t=document.querySelector(".sheet-menu__accordion-items");function n(e){e.classList.contains("sheet-menu__accordion-item--active")?e.classList.remove("sheet-menu__accordion-item--active"):(t.childNodes.forEach(function(e){"li"==e.localName&&e.classList.remove("sheet-menu__accordion-item--active")}),e.classList.add("sheet-menu__accordion-item--active"))}t.addEventListener("click",function(e){e.preventDefault();var t=e.target;t.classList.contains("sheet-menu__accordion-item")?n(t):t.classList.contains("sheet-menu__accordion-item-background")?n(t.parentNode):t.parentNode.classList.contains("sheet-menu__accordion-item-background")&&n(t.parentNode.parentNode)})}),document.addEventListener("DOMContentLoaded",function(e){document.querySelector("#thanks-window-button"),document.querySelector("#thanks-window");var t=document.querySelectorAll(".btn[data-goto-form='1']"),n=(document.querySelector("body"),document.querySelector("html"));t.forEach(function(e){e.addEventListener("click",function(e){e.preventDefault();var t=document.querySelector("#sheet-form").offsetTop;gotoSection(n,t,600)})})}),window.addEventListener("load",function(e){var n=document.querySelector("#hamburger-overlay"),r=(document.querySelector("#hamburger-overlay__close"),document.querySelector("#fp-nav")),t=(document.querySelectorAll("#nav-main__list>li"),document.querySelector(".navigation"),document.querySelector("body")),o=(document.querySelector("html"),["active","hidden"]),i=[n,t];n.addEventListener("click",function(e){if(e.preventDefault(),"hamburger-overlay"==e.target.id&&window.innerWidth<=768)_toggleClass(i,o);else{var t=e.target;"null"!=typeof t.getAttribute("href")&&"#"!==t.getAttribute("href")&&(window.innerWidth<=768&&_toggleClass(i,o),window.location.hash=t.getAttribute("href"))}n.classList.contains("active")||window.innerWidth<=768?r.style.display="none":r.style.display="flex"}),document.querySelectorAll('.btn[data-goto-form="1"]').forEach(function(e){"object"==_typeof(e)&&e.addEventListener("click",function(e){e.preventDefault(),window.location.hash="sheetform"})});var a=new MobileDetect(window.navigator.userAgent);function s(e,t){new fullpage("#fullpage",{licenseKey:"D2DB0F76-42B04C3A-938789B7-AE7D1A8F",anchors:["sheetfirst","sheetwhy","sheetchocco","sheetcommand","sheetmenu","sheetreviews","sheethowwork","sheetform","sheetcontact"],navigation:!0,navigationPosition:"right",verticalCentered:!1,scrollingSpeed:1e3,responsiveWidth:e,responsiveHeight:t})}if($(window).outerWidth()<=480&&a.mobile()){s(480,!1)}else if($(window).outerWidth()<=768&&a.mobile()){s(768,!1)}else{s(768,650)}});var _toggleClass=function(e,n){e.forEach(function(e,t){return e.classList.toggle(n[t])})};function gotoSection(n,e,r){var o=n.scrollTop,i=e-o,a=0;!function e(){a+=20;var t=Math.easeInOutQuad(a,o,i,r);n.scrollTop=t,a<r&&setTimeout(e,20)}()}function createOverlay(e,t){var n=document.createElement("div");n.innerHTML=e;var r=n.querySelector(".overlay"),o=n.querySelector(".overlay__title"),i=n.querySelector(".overlay__text"),a=n.querySelector("#close-overlay");return n=null,r.addEventListener("click",function(e){e.target===r&&a.click()}),a.addEventListener("click",function(e){e.preventDefault(),document.body.removeChild(r),t.style.overflow="visible"}),{open:function(){document.body.appendChild(r),t.style.overflow="hidden"},close:function(){a.click()},setContent:function(e,t){t&&(o.innerHTML=t),i.innerHTML=e}}}Math.easeInOutQuad=function(e,t,n,r){return(e/=r/2)<1?n/2*e*e+t:-n/2*(--e*(e-2)-1)+t},document.addEventListener("DOMContentLoaded",function(e){var n=document.querySelectorAll(".sliderTwo-item"),t=document.querySelector(".sheet-reviews__peoples"),r=document.querySelectorAll(".sheet-reviews__peoples-item"),o=0;n.forEach(function(e){e.setAttribute("data-index-slide",o),o++}),o=0,r.forEach(function(e){e.setAttribute("data-index-arrow",o),o++}),t.addEventListener("click",function(e){e.preventDefault();var t=e.target;t.parentElement.classList.contains("sheet-reviews__people")&&(t.parentElement.parentElement.classList.contains("active")||(n.forEach(function(e){e.classList.remove("active")}),r.forEach(function(e){e.classList.remove("active")}),n[t.parentElement.parentElement.dataset.indexArrow].classList.add("active"),t.parentElement.parentElement.classList.add("active")))})}),document.addEventListener("DOMContentLoaded",function(e){["#slider-sheet-chocco"].forEach(function(e){var t,n,r,o=["btn"],i=document.querySelector(e),a=document.querySelector(e+">.slider__left"),s=document.querySelector(e+">.slider__right"),l=document.querySelector(e+">.slider__items"),c=[],u=0;if(l.childNodes.forEach(function(e){void 0!==e.classList&&e.classList.contains("slider__item")&&(c[u]=e,0==u?c[r=0].dataset.itemActive="active":"active"==e.dataset.itemActive&&(r=u,c[0].dataset.itemActive=""),u++)}),!(c.length<=1)){t=c[0].cloneNode(!0),l.appendChild(t),n=c[c.length-1].cloneNode(!0),l.insertBefore(n,l.children[0]);var f=[];f[0]=t,u=0,c.forEach(function(e){f[++u]=e}),f[++u]=n,c=f,0<++r&&d(r),i.addEventListener("click",function(e){if(function(e,t){var n=!1;return e.forEach(function(e){t.indexOf(e)||(n=!0)}),n}(e.target.classList,o));else{e.preventDefault();var t=0;e.target==a&&0<r?(0==--r&&(t=1),d(r,t)):e.target==s&&r<c.length-1&&(++r==c.length-1&&(t=2),d(r,t))}})}function d(t,n){function e(){setTimeout(function(){c.forEach(function(e){e.style.transition="unset"}),c.forEach(function(e){1==n?(e.style.left="-"+100*(c.length-2)+"%",r=c.length-2):2==n&&(e.style.left="-100%",r=1)})},500)}c[0].removeEventListener("transitionend",e),c.forEach(function(e){e.style.left="-"+100*t+"%",e.style.transition="left 0.5s ease 0s"}),0<n&&c[0].addEventListener("transitionend",e())}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
